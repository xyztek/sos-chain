{
  "address": "0x9d96223C297Bd282168B6cb231A7604cB71b8C0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "CancelOracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "specId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "callbackAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "callbackFunctionId",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cancelExpiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dataVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "OracleRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXPIRY_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunc",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        }
      ],
      "name": "cancelOracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_data",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_checkId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_govRequestId",
          "type": "uint256"
        }
      ],
      "name": "fulfillArgcisRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_expiration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "fulfillOracleRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "getAuthorizationStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainlinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_specId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_callbackAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_callbackFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dataVersion",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "oracleRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setFulfillmentPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x284896801c0f7b1c8765248c95d9cd0755ccf331328e7acbbe7f9f64f57129d2",
  "receipt": {
    "to": null,
    "from": "0xF8Ab4E15085eFe69348D19FaAd408C6DF6BD4DA3",
    "contractAddress": "0x9d96223C297Bd282168B6cb231A7604cB71b8C0E",
    "transactionIndex": 1,
    "gasUsed": "2031047",
    "logsBloom": "0x
    "blockHash": "0x1962cc6bccb38f722f62ed550e5435f618340d9263369c4c32b0f7a1aec42ed1",
    "transactionHash": "0x284896801c0f7b1c8765248c95d9cd0755ccf331328e7acbbe7f9f64f57129d2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12185942,
        "transactionHash": "0x284896801c0f7b1c8765248c95d9cd0755ccf331328e7acbbe7f9f64f57129d2",
        "address": "0x9d96223C297Bd282168B6cb231A7604cB71b8C0E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8ab4e15085efe69348d19faad408c6df6bd4da3"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x1962cc6bccb38f722f62ed550e5435f618340d9263369c4c32b0f7a1aec42ed1"
      }
    ],
    "blockNumber": 12185942,
    "cumulativeGasUsed": "2195715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0b9d5D9136855f6FEc3c0993feE6E9CE8a297846"
  ],
  "numDeployments": 1,
  "solcInputHash": "75e6c4179db72ab807d9a4271c5ab2e6",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"CancelOracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"specId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"callbackAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelExpiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dataVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXPIRY_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunc\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"}],\"name\":\"cancelOracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_data\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_checkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_govRequestId\",\"type\":\"uint256\"}],\"name\":\"fulfillArgcisRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"fulfillOracleRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"getAuthorizationStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainlinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_specId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dataVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"oracleRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setFulfillmentPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"details\":\"Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.\",\"params\":{\"_callbackFunc\":\"The requester's specified callback address\",\"_expiration\":\"The time of the expiration for the request\",\"_payment\":\"The amount of payment given (specified in wei)\",\"_requestId\":\"The request ID\"}},\"constructor\":{\"details\":\"Sets the LinkToken address for the imported LinkTokenInterface\",\"params\":{\"_link\":\"The address of the LINK token\"}},\"fulfillArgcisRequest(bytes32,uint256,address,bytes4,uint256,bool,uint256,uint256)\":{\"details\":\"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.\",\"params\":{\"_callbackAddress\":\"The callback address to call for fulfillment\",\"_callbackFunctionId\":\"The callback function ID to use for fulfillment\",\"_data\":\"The data to return to the consuming contract\",\"_expiration\":\"The expiration that the node should respond by before the requester can cancel\",\"_payment\":\"The payment amount that will be released for the oracle (specified in wei)\",\"_requestId\":\"The fulfillment request ID that must match the requester's\"},\"returns\":{\"_0\":\"Status if the external call was successful\"}},\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"details\":\"Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.\",\"params\":{\"_callbackAddress\":\"The callback address to call for fulfillment\",\"_callbackFunctionId\":\"The callback function ID to use for fulfillment\",\"_data\":\"The data to return to the consuming contract\",\"_expiration\":\"The expiration that the node should respond by before the requester can cancel\",\"_payment\":\"The payment amount that will be released for the oracle (specified in wei)\",\"_requestId\":\"The fulfillment request ID that must match the requester's\"},\"returns\":{\"_0\":\"Status if the external call was successful\"}},\"getAuthorizationStatus(address)\":{\"params\":{\"_node\":\"The address of the Chainlink node\"},\"returns\":{\"_0\":\"The authorization status of the node\"}},\"getChainlinkToken()\":{\"details\":\"This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract\"},\"isOwner()\":{\"details\":\"Returns true if the caller is the current owner.\"},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.\",\"params\":{\"_amount\":\"Amount of LINK sent (specified in wei)\",\"_data\":\"Payload of the transaction\",\"_sender\":\"Address of the sender\"}},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"details\":\"Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.\",\"params\":{\"_callbackAddress\":\"The callback address for the response\",\"_callbackFunctionId\":\"The callback function ID for the response\",\"_data\":\"The CBOR payload of the request\",\"_dataVersion\":\"The specified data version\",\"_nonce\":\"The nonce sent by the requester\",\"_payment\":\"The amount of payment given (specified in wei)\",\"_sender\":\"The sender of the request\",\"_specId\":\"The Job Specification ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"setFulfillmentPermission(address,bool)\":{\"params\":{\"_allowed\":\"Bool value to determine if the node can fulfill requests\",\"_node\":\"The address of the Chainlink node\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"The owner of the contract can be another wallet and does not have to be a Chainlink node\",\"params\":{\"_amount\":\"The amount to send (specified in wei)\",\"_recipient\":\"The address to send the LINK token to\"}},\"withdrawable()\":{\"details\":\"We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\",\"returns\":{\"_0\":\"The amount of withdrawable LINK on the contract\"}}},\"title\":\"The Chainlink Oracle contract replicated for extra oracle fullfill methods\"},\"userdoc\":{\"methods\":{\"cancelOracleRequest(bytes32,uint256,bytes4,uint256)\":{\"notice\":\"Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address.\"},\"constructor\":\"Deploy with the address of the LINK token\",\"fulfillArgcisRequest(bytes32,uint256,address,bytes4,uint256,bool,uint256,uint256)\":{\"notice\":\"Different Abi for input !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"},\"fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)\":{\"notice\":\"Called by the Chainlink node to fulfill requests\"},\"getAuthorizationStatus(address)\":{\"notice\":\"Use this to check if a node is authorized for fulfilling requests\"},\"getChainlinkToken()\":{\"notice\":\"Returns the address of the LINK token\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Called when LINK is sent to the contract via `transferAndCall`\"},\"oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)\":{\"notice\":\"Creates the Chainlink request\"},\"setFulfillmentPermission(address,bool)\":{\"notice\":\"Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\"},\"withdraw(address,uint256)\":{\"notice\":\"Allows the node operator to withdraw earned LINK to a given address\"},\"withdrawable()\":{\"notice\":\"Displays the amount of LINK that is available for the node operator to withdraw\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/hybrid/OracleArgcis.sol\":\"OracleArgcis\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nabstract contract LinkTokenReceiver {\\n\\n  bytes4 constant private ORACLE_REQUEST_SELECTOR = 0x40429946;\\n  uint256 constant private SELECTOR_LENGTH = 4;\\n  uint256 constant private EXPECTED_REQUEST_WORDS = 2;\\n  uint256 constant private MINIMUM_REQUEST_LENGTH = SELECTOR_LENGTH + (32 * EXPECTED_REQUEST_WORDS);\\n  /**\\n   * @notice Called when LINK is sent to the contract via `transferAndCall`\\n   * @dev The data payload's first 2 words will be overwritten by the `_sender` and `_amount`\\n   * values to ensure correctness. Calls oracleRequest.\\n   * @param _sender Address of the sender\\n   * @param _amount Amount of LINK sent (specified in wei)\\n   * @param _data Payload of the transaction\\n   */\\n  function onTokenTransfer(\\n    address _sender,\\n    uint256 _amount,\\n    bytes memory _data\\n  )\\n    public\\n    onlyLINK\\n    validRequestLength(_data)\\n    permittedFunctionsForLINK(_data)\\n  {\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 36), _sender) // ensure correct sender is passed\\n      // solhint-disable-next-line avoid-low-level-calls\\n      mstore(add(_data, 68), _amount)    // ensure correct amount is passed\\n    }\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = address(this).delegatecall(_data); // calls oracleRequest\\n    require(success, \\\"Unable to create request\\\");\\n  }\\n\\n  function getChainlinkToken() public view virtual returns (address);\\n\\n  /**\\n   * @dev Reverts if not sent from the LINK token\\n   */\\n  modifier onlyLINK() {\\n    require(msg.sender == getChainlinkToken(), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given data does not begin with the `oracleRequest` function selector\\n   * @param _data The data payload of the request\\n   */\\n  modifier permittedFunctionsForLINK(bytes memory _data) {\\n    bytes4 funcSelector;\\n    assembly {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      funcSelector := mload(add(_data, 32))\\n    }\\n    require(funcSelector == ORACLE_REQUEST_SELECTOR, \\\"Must use whitelisted functions\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the given payload is less than needed to create a request\\n   * @param _data The request payload\\n   */\\n  modifier validRequestLength(bytes memory _data) {\\n    require(_data.length >= MINIMUM_REQUEST_LENGTH, \\\"Invalid request length\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xcbde7153731a1cd229fbef4dcbb0b5a7a3ff4782bca40cbc12f836c39e054769\"},\"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xe513c0f60edf13da7d82625489cf2008c7b66170f3b1ed1606b84c73f95b17ad\"},\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xe245a7be950c94d87bb775ae9ee9fbd693fbe2987778e6ce0b04605ea44b7b68\"},\"@chainlink/contracts/src/v0.6/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n  function getAuthorizationStatus(address node) external view returns (bool);\\n  function setFulfillmentPermission(address node, bool allowed) external;\\n  function withdraw(address recipient, uint256 amount) external;\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd6a2eb19d73207e6e571208a19604fc3be880dbf317678ecd6b80e984d9a80d5\"},\"@chainlink/contracts/src/v0.6/interfaces/WithdrawalInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface WithdrawalInterface {\\n  /**\\n   * @notice transfer LINK held by the contract belonging to msg.sender to\\n   * another address\\n   * @param recipient is the address to send the LINK to\\n   * @param amount is the amount of LINK to send\\n   */\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  /**\\n   * @notice query the available amount of LINK to withdraw by msg.sender\\n   */\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa3d3b86c791eafb1611562946ece09da4d389a51bcc518d13191750264eac715\"},\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\\n * the owner.\\n *\\n * This contract has been modified to remove the revokeOwnership function\\n */\\ncontract Ownable {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor () internal {\\n    _owner = msg.sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns true if the caller is the current owner.\\n   */\\n  function isOwner() public view returns (bool) {\\n    return msg.sender == _owner;\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0x20a325da437d524570c833519481749e6e33018fe899dfdad66e59e1f60f6192\"},\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\",\"keccak256\":\"0x105f5e9491f3d0bbdd4f1c7627eb839d69b944bfd803028a01cc083597692c1f\"},\"contracts/hybrid/OracleArgcis.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/LinkTokenReceiver.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/OracleInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/WithdrawalInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/vendor/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\\\";\\n\\n/**\\n * @title The Chainlink Oracle contract replicated for extra oracle fullfill methods\\n */\\ncontract OracleArgcis is\\n    ChainlinkRequestInterface,\\n    OracleInterface,\\n    Ownable,\\n    LinkTokenReceiver,\\n    WithdrawalInterface\\n{\\n    using SafeMathChainlink for uint256;\\n\\n    uint256 public constant EXPIRY_TIME = 5 minutes;\\n    uint256 private constant MINIMUM_CONSUMER_GAS_LIMIT = 400000;\\n    // We initialize fields to 1 instead of 0 so that the first invocation\\n    // does not cost more gas.\\n    uint256 private constant ONE_FOR_CONSISTENT_GAS_COST = 1;\\n\\n    LinkTokenInterface internal LinkToken;\\n    mapping(bytes32 => bytes32) private commitments;\\n    mapping(address => bool) private authorizedNodes;\\n    uint256 private withdrawableTokens = ONE_FOR_CONSISTENT_GAS_COST;\\n\\n    event OracleRequest(\\n        bytes32 indexed specId,\\n        address requester,\\n        bytes32 requestId,\\n        uint256 payment,\\n        address callbackAddr,\\n        bytes4 callbackFunctionId,\\n        uint256 cancelExpiration,\\n        uint256 dataVersion,\\n        bytes data\\n    );\\n\\n    event CancelOracleRequest(bytes32 indexed requestId);\\n\\n    /**\\n     * @notice Deploy with the address of the LINK token\\n     * @dev Sets the LinkToken address for the imported LinkTokenInterface\\n     * @param _link The address of the LINK token\\n     */\\n    constructor(address _link) public Ownable() {\\n        LinkToken = LinkTokenInterface(_link); // external but already deployed and unalterable\\n    }\\n\\n    /**\\n     * @notice Creates the Chainlink request\\n     * @dev Stores the hash of the params as the on-chain commitment for the request.\\n     * Emits OracleRequest event for the Chainlink node to detect.\\n     * @param _sender The sender of the request\\n     * @param _payment The amount of payment given (specified in wei)\\n     * @param _specId The Job Specification ID\\n     * @param _callbackAddress The callback address for the response\\n     * @param _callbackFunctionId The callback function ID for the response\\n     * @param _nonce The nonce sent by the requester\\n     * @param _dataVersion The specified data version\\n     * @param _data The CBOR payload of the request\\n     */\\n    function oracleRequest(\\n        address _sender,\\n        uint256 _payment,\\n        bytes32 _specId,\\n        address _callbackAddress,\\n        bytes4 _callbackFunctionId,\\n        uint256 _nonce,\\n        uint256 _dataVersion,\\n        bytes calldata _data\\n    ) external override onlyLINK checkCallbackAddress(_callbackAddress) {\\n        bytes32 requestId = keccak256(abi.encodePacked(_sender, _nonce));\\n        require(commitments[requestId] == 0, \\\"Must use a unique ID\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        uint256 expiration = now.add(EXPIRY_TIME);\\n\\n        commitments[requestId] = keccak256(\\n            abi.encodePacked(\\n                _payment,\\n                _callbackAddress,\\n                _callbackFunctionId,\\n                expiration\\n            )\\n        );\\n\\n        emit OracleRequest(\\n            _specId,\\n            _sender,\\n            requestId,\\n            _payment,\\n            _callbackAddress,\\n            _callbackFunctionId,\\n            expiration,\\n            _dataVersion,\\n            _data\\n        );\\n    }\\n\\n    /**\\n     * @notice Called by the Chainlink node to fulfill requests\\n     * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n     * Will call the callback address' callback function without bubbling up error\\n     * checking in a `require` so that the node can get paid.\\n     * @param _requestId The fulfillment request ID that must match the requester's\\n     * @param _payment The payment amount that will be released for the oracle (specified in wei)\\n     * @param _callbackAddress The callback address to call for fulfillment\\n     * @param _callbackFunctionId The callback function ID to use for fulfillment\\n     * @param _expiration The expiration that the node should respond by before the requester can cancel\\n     * @param _data The data to return to the consuming contract\\n     * @return Status if the external call was successful\\n     */\\n    function fulfillOracleRequest(\\n        bytes32 _requestId,\\n        uint256 _payment,\\n        address _callbackAddress,\\n        bytes4 _callbackFunctionId,\\n        uint256 _expiration,\\n        bytes32 _data\\n    )\\n        external\\n        override\\n        onlyAuthorizedNode\\n        isValidRequest(_requestId)\\n        returns (bool)\\n    {\\n        bytes32 paramsHash = keccak256(\\n            abi.encodePacked(\\n                _payment,\\n                _callbackAddress,\\n                _callbackFunctionId,\\n                _expiration\\n            )\\n        );\\n        require(\\n            commitments[_requestId] == paramsHash,\\n            \\\"Params do not match request ID\\\"\\n        );\\n        withdrawableTokens = withdrawableTokens.add(_payment);\\n        delete commitments[_requestId];\\n        require(\\n            gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT,\\n            \\\"Must provide consumer enough gas\\\"\\n        );\\n        // All updates to the oracle's fulfillment should come before calling the\\n        // callback(addr+functionId) as it is untrusted.\\n        // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n        (bool success, ) = _callbackAddress.call(\\n            abi.encodeWithSelector(_callbackFunctionId, _requestId, _data)\\n        ); // solhint-disable-line avoid-low-level-calls\\n        return success;\\n    }\\n\\n    /**\\n     * @notice Different Abi for input !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n     * @dev Given params must hash back to the commitment stored from `oracleRequest`.\\n     * Will call the callback address' callback function without bubbling up error\\n     * checking in a `require` so that the node can get paid.\\n     * @param _requestId The fulfillment request ID that must match the requester's\\n     * @param _payment The payment amount that will be released for the oracle (specified in wei)\\n     * @param _callbackAddress The callback address to call for fulfillment\\n     * @param _callbackFunctionId The callback function ID to use for fulfillment\\n     * @param _expiration The expiration that the node should respond by before the requester can cancel\\n     * @param _data The data to return to the consuming contract\\n     * @return Status if the external call was successful\\n     */\\n    function fulfillArgcisRequest(\\n        bytes32 _requestId,\\n        uint256 _payment,\\n        address _callbackAddress,\\n        bytes4 _callbackFunctionId,\\n        uint256 _expiration,\\n        bool _data,\\n        uint256 _checkId,\\n        uint256 _govRequestId\\n    ) external onlyAuthorizedNode isValidRequest(_requestId) returns (bool) {\\n        bytes32 paramsHash = keccak256(\\n            abi.encodePacked(\\n                _payment,\\n                _callbackAddress,\\n                _callbackFunctionId,\\n                _expiration\\n            )\\n        );\\n        require(\\n            commitments[_requestId] == paramsHash,\\n            \\\"Params do not match request ID\\\"\\n        );\\n        withdrawableTokens = withdrawableTokens.add(_payment);\\n        delete commitments[_requestId];\\n        require(\\n            gasleft() >= MINIMUM_CONSUMER_GAS_LIMIT,\\n            \\\"Must provide consumer enough gas\\\"\\n        );\\n        // All updates to the oracle's fulfillment should come before calling the\\n        // callback(addr+functionId) as it is untrusted.\\n        // See: https://solidity.readthedocs.io/en/develop/security-considerations.html#use-the-checks-effects-interactions-pattern\\n        (bool success, ) = _callbackAddress.call(\\n            abi.encodeWithSelector(\\n                _callbackFunctionId,\\n                _requestId,\\n                _data,\\n                _checkId,\\n                _govRequestId\\n            )\\n        ); // solhint-disable-line avoid-low-level-calls\\n        return success;\\n    }\\n\\n    /**\\n     * @notice Use this to check if a node is authorized for fulfilling requests\\n     * @param _node The address of the Chainlink node\\n     * @return The authorization status of the node\\n     */\\n    function getAuthorizationStatus(address _node)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return authorizedNodes[_node];\\n    }\\n\\n    /**\\n     * @notice Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow.\\n     * @param _node The address of the Chainlink node\\n     * @param _allowed Bool value to determine if the node can fulfill requests\\n     */\\n    function setFulfillmentPermission(address _node, bool _allowed)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        authorizedNodes[_node] = _allowed;\\n    }\\n\\n    /**\\n     * @notice Allows the node operator to withdraw earned LINK to a given address\\n     * @dev The owner of the contract can be another wallet and does not have to be a Chainlink node\\n     * @param _recipient The address to send the LINK token to\\n     * @param _amount The amount to send (specified in wei)\\n     */\\n    function withdraw(address _recipient, uint256 _amount)\\n        external\\n        override(OracleInterface, WithdrawalInterface)\\n        onlyOwner\\n        hasAvailableFunds(_amount)\\n    {\\n        withdrawableTokens = withdrawableTokens.sub(_amount);\\n        assert(LinkToken.transfer(_recipient, _amount));\\n    }\\n\\n    /**\\n     * @notice Displays the amount of LINK that is available for the node operator to withdraw\\n     * @dev We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage\\n     * @return The amount of withdrawable LINK on the contract\\n     */\\n    function withdrawable()\\n        external\\n        view\\n        override(OracleInterface, WithdrawalInterface)\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        return withdrawableTokens.sub(ONE_FOR_CONSISTENT_GAS_COST);\\n    }\\n\\n    /**\\n     * @notice Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK\\n     * sent for the request back to the requester's address.\\n     * @dev Given params must hash to a commitment stored on the contract in order for the request to be valid\\n     * Emits CancelOracleRequest event.\\n     * @param _requestId The request ID\\n     * @param _payment The amount of payment given (specified in wei)\\n     * @param _callbackFunc The requester's specified callback address\\n     * @param _expiration The time of the expiration for the request\\n     */\\n    function cancelOracleRequest(\\n        bytes32 _requestId,\\n        uint256 _payment,\\n        bytes4 _callbackFunc,\\n        uint256 _expiration\\n    ) external override {\\n        bytes32 paramsHash = keccak256(\\n            abi.encodePacked(_payment, msg.sender, _callbackFunc, _expiration)\\n        );\\n        require(\\n            paramsHash == commitments[_requestId],\\n            \\\"Params do not match request ID\\\"\\n        );\\n        // solhint-disable-next-line not-rely-on-time\\n        require(_expiration <= now, \\\"Request is not expired\\\");\\n\\n        delete commitments[_requestId];\\n        emit CancelOracleRequest(_requestId);\\n\\n        assert(LinkToken.transfer(msg.sender, _payment));\\n    }\\n\\n    /**\\n     * @notice Returns the address of the LINK token\\n     * @dev This is the public implementation for chainlinkTokenAddress, which is\\n     * an internal method of the ChainlinkClient contract\\n     */\\n    function getChainlinkToken() public view override returns (address) {\\n        return address(LinkToken);\\n    }\\n\\n    // MODIFIERS\\n\\n    /**\\n     * @dev Reverts if amount requested is greater than withdrawable balance\\n     * @param _amount The given amount to compare to `withdrawableTokens`\\n     */\\n    modifier hasAvailableFunds(uint256 _amount) {\\n        require(\\n            withdrawableTokens >= _amount.add(ONE_FOR_CONSISTENT_GAS_COST),\\n            \\\"Amount requested is greater than withdrawable balance\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if request ID does not exist\\n     * @param _requestId The given request ID to check in stored `commitments`\\n     */\\n    modifier isValidRequest(bytes32 _requestId) {\\n        require(commitments[_requestId] != 0, \\\"Must have a valid requestId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.sender` is not authorized to fulfill requests\\n     */\\n    modifier onlyAuthorizedNode() {\\n        require(\\n            authorizedNodes[msg.sender] || msg.sender == owner(),\\n            \\\"Not an authorized node to fulfill requests\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the callback address is the LINK token\\n     * @param _to The callback address\\n     */\\n    modifier checkCallbackAddress(address _to) {\\n        require(_to != address(LinkToken), \\\"Cannot callback to LINK\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x36a27693b3212357c2ce59f7656cc6b32952716a11c95485c8672d56c00d026b\"}},\"version\":1}",
  "bytecode": "0x6080604052600160045534801561001557600080fd5b506040516123f23803806123f28339818101604052602081101561003857600080fd5b8101908080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061229c806101566000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637fcd56db1161008c578063a4c0ed3611610066578063a4c0ed3614610518578063d3e9c314146105fd578063f2fde38b14610659578063f3fef3a31461069d576100ea565b80637fcd56db1461045c5780638da5cb5b146104ac5780638f32d59b146104f6576100ea565b80634b602282116100c85780634b602282146102f1578063501883011461030f57806367560f261461032d5780636ee4d553146103f1576100ea565b8063165d35e1146100ef57806340429946146101395780634ab0d19014610244575b600080fd5b6100f76106eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610242600480360361010081101561015057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019092919080359060200190929190803590602001906401000000008111156101fe57600080fd5b82018360208201111561021057600080fd5b8035906020019184600183028401116401000000008311171561023257600080fd5b9091929391929390505050610715565b005b6102d7600480360360c081101561025a57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019092919080359060200190929190505050610b8b565b604051808215151515815260200191505060405180910390f35b6102f961101a565b6040518082815260200191505060405180910390f35b610317611020565b6040518082815260200191505060405180910390f35b6103d7600480360361010081101561034457600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019092919080351515906020019092919080359060200190929190803590602001909291905050506110b7565b604051808215151515815260200191505060405180910390f35b61045a6004803603608081101561040757600080fd5b81019080803590602001909291908035906020019092919080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291908035906020019092919050505061155c565b005b6104aa6004803603604081101561047257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061183f565b005b6104b4611914565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104fe61193d565b604051808215151515815260200191505060405180910390f35b6105fb6004803603606081101561052e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561057557600080fd5b82018360208201111561058757600080fd5b803590602001918460018302840111640100000000831117156105a957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611994565b005b61063f6004803603602081101561061357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611cbd565b604051808215151515815260200191505060405180910390f35b61069b6004803603602081101561066f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d13565b005b6106e9600480360360408110156106b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611d99565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61071d6106eb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d75737420757365204c494e4b20746f6b656e0000000000000000000000000081525060200191505060405180910390fd5b85600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610882576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616e6e6f742063616c6c6261636b20746f204c494e4b00000000000000000081525060200191505060405180910390fd5b60008a86604051602001808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001925050506040516020818303038152906040528051906020012090506000801b60026000838152602001908152602001600020541461096f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f4d75737420757365206120756e6971756520494400000000000000000000000081525060200191505060405180910390fd5b600061098661012c42611f8c90919063ffffffff16565b90508a898983604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152600401828152602001945050505050604051602081830303815290604052805190602001206002600084815260200190815260200160002081905550897fd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c658d848e8d8d878d8d8d604051808a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001867bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a505050505050505050505060405180910390a2505050505050505050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680610c175750610be8611914565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610c6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061223d602a913960400191505060405180910390fd5b866000801b60026000838152602001908152602001600020541415610cf9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520612076616c696420726571756573744964000000000081525060200191505060405180910390fd5b600087878787604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182815260200194505050505060405160208183030381529060405280519060200120905080600260008b81526020019081526020016000205414610e31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f506172616d7320646f206e6f74206d617463682072657175657374204944000081525060200191505060405180910390fd5b610e4688600454611f8c90919063ffffffff16565b600481905550600260008a81526020019081526020016000206000905562061a805a1015610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4d7573742070726f7669646520636f6e73756d657220656e6f7567682067617381525060200191505060405180910390fd5b60008773ffffffffffffffffffffffffffffffffffffffff16878b876040516024018083815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610f9f5780518252602082019150602081019050602083039250610f7c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611001576040519150601f19603f3d011682016040523d82523d6000602084013e611006565b606091505b505090508093505050509695505050505050565b61012c81565b600061102a61193d565b61109c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6110b2600160045461201490919063ffffffff16565b905090565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16806111435750611114611914565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061223d602a913960400191505060405180910390fd5b886000801b60026000838152602001908152602001600020541415611225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d757374206861766520612076616c696420726571756573744964000000000081525060200191505060405180910390fd5b600089898989604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182815260200194505050505060405160208183030381529060405280519060200120905080600260008d8152602001908152602001600020541461135d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f506172616d7320646f206e6f74206d617463682072657175657374204944000081525060200191505060405180910390fd5b6113728a600454611f8c90919063ffffffff16565b600481905550600260008c81526020019081526020016000206000905562061a805a1015611408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4d7573742070726f7669646520636f6e73756d657220656e6f7567682067617381525060200191505060405180910390fd5b60008973ffffffffffffffffffffffffffffffffffffffff16898d8989896040516024018085815260200184151515158152602001838152602001828152602001945050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106114df57805182526020820191506020810190506020830392506114bc565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611541576040519150601f19603f3d011682016040523d82523d6000602084013e611546565b606091505b5050905080935050505098975050505050505050565b600083338484604051602001808581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b8152601401837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182815260200194505050505060405160208183030381529060405280519060200120905060026000868152602001908152602001600020548114611694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f506172616d7320646f206e6f74206d617463682072657175657374204944000081525060200191505060405180910390fd5b4282111561170a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f52657175657374206973206e6f7420657870697265640000000000000000000081525060200191505060405180910390fd5b6002600086815260200190815260200160002060009055847fa7842b9ec549398102c0d91b1b9919b2f20558aefdadf57528a95c6cd3292e9360405160405180910390a2600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156117f757600080fd5b505af115801561180b573d6000803e3d6000fd5b505050506040513d602081101561182157600080fd5b810190808051906020019092919050505061183857fe5b5050505050565b61184761193d565b6118b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61199c6106eb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d75737420757365204c494e4b20746f6b656e0000000000000000000000000081525060200191505060405180910390fd5b80600260200260040181511015611abb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f496e76616c69642072657175657374206c656e6774680000000000000000000081525060200191505060405180910390fd5b81600060208201519050634042994660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4d757374207573652077686974656c69737465642066756e6374696f6e73000081525060200191505060405180910390fd5b85602485015284604485015260003073ffffffffffffffffffffffffffffffffffffffff16856040518082805190602001908083835b60208310611bd85780518252602082019150602081019050602083039250611bb5565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114611c38576040519150601f19603f3d011682016040523d82523d6000602084013e611c3d565b606091505b5050905080611cb4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f556e61626c6520746f206372656174652072657175657374000000000000000081525060200191505060405180910390fd5b50505050505050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b611d1b61193d565b611d8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b611d968161209d565b50565b611da161193d565b611e13576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80611e28600182611f8c90919063ffffffff16565b6004541015611e82576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806122086035913960400191505060405180910390fd5b611e978260045461201490919063ffffffff16565b600481905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611f4657600080fd5b505af1158015611f5a573d6000803e3d6000fd5b505050506040513d6020811015611f7057600080fd5b8101908080519060200190929190505050611f8757fe5b505050565b60008082840190508381101561200a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008282111561208c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612123576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806121e26026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416d6f756e74207265717565737465642069732067726561746572207468616e20776974686472617761626c652062616c616e63654e6f7420616e20617574686f72697a6564206e6f646520746f2066756c66696c6c207265717565737473a264697066735822122030388108187ab26d2453e3d1679d4d263e6114456028177840510678bd5fc46d64736f6c63430006060033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "details": "Given params must hash to a commitment stored on the contract in order for the request to be valid Emits CancelOracleRequest event.",
        "params": {
          "_callbackFunc": "The requester's specified callback address",
          "_expiration": "The time of the expiration for the request",
          "_payment": "The amount of payment given (specified in wei)",
          "_requestId": "The request ID"
        }
      },
      "constructor": {
        "details": "Sets the LinkToken address for the imported LinkTokenInterface",
        "params": {
          "_link": "The address of the LINK token"
        }
      },
      "fulfillArgcisRequest(bytes32,uint256,address,bytes4,uint256,bool,uint256,uint256)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "params": {
          "_callbackAddress": "The callback address to call for fulfillment",
          "_callbackFunctionId": "The callback function ID to use for fulfillment",
          "_data": "The data to return to the consuming contract",
          "_expiration": "The expiration that the node should respond by before the requester can cancel",
          "_payment": "The payment amount that will be released for the oracle (specified in wei)",
          "_requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
        "details": "Given params must hash back to the commitment stored from `oracleRequest`. Will call the callback address' callback function without bubbling up error checking in a `require` so that the node can get paid.",
        "params": {
          "_callbackAddress": "The callback address to call for fulfillment",
          "_callbackFunctionId": "The callback function ID to use for fulfillment",
          "_data": "The data to return to the consuming contract",
          "_expiration": "The expiration that the node should respond by before the requester can cancel",
          "_payment": "The payment amount that will be released for the oracle (specified in wei)",
          "_requestId": "The fulfillment request ID that must match the requester's"
        },
        "returns": {
          "_0": "Status if the external call was successful"
        }
      },
      "getAuthorizationStatus(address)": {
        "params": {
          "_node": "The address of the Chainlink node"
        },
        "returns": {
          "_0": "The authorization status of the node"
        }
      },
      "getChainlinkToken()": {
        "details": "This is the public implementation for chainlinkTokenAddress, which is an internal method of the ChainlinkClient contract"
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "The data payload's first 2 words will be overwritten by the `_sender` and `_amount` values to ensure correctness. Calls oracleRequest.",
        "params": {
          "_amount": "Amount of LINK sent (specified in wei)",
          "_data": "Payload of the transaction",
          "_sender": "Address of the sender"
        }
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "details": "Stores the hash of the params as the on-chain commitment for the request. Emits OracleRequest event for the Chainlink node to detect.",
        "params": {
          "_callbackAddress": "The callback address for the response",
          "_callbackFunctionId": "The callback function ID for the response",
          "_data": "The CBOR payload of the request",
          "_dataVersion": "The specified data version",
          "_nonce": "The nonce sent by the requester",
          "_payment": "The amount of payment given (specified in wei)",
          "_sender": "The sender of the request",
          "_specId": "The Job Specification ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "setFulfillmentPermission(address,bool)": {
        "params": {
          "_allowed": "Bool value to determine if the node can fulfill requests",
          "_node": "The address of the Chainlink node"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "The owner of the contract can be another wallet and does not have to be a Chainlink node",
        "params": {
          "_amount": "The amount to send (specified in wei)",
          "_recipient": "The address to send the LINK token to"
        }
      },
      "withdrawable()": {
        "details": "We use `ONE_FOR_CONSISTENT_GAS_COST` in place of 0 in storage",
        "returns": {
          "_0": "The amount of withdrawable LINK on the contract"
        }
      }
    },
    "title": "The Chainlink Oracle contract replicated for extra oracle fullfill methods"
  },
  "userdoc": {
    "methods": {
      "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": {
        "notice": "Allows requesters to cancel requests sent to this oracle contract. Will transfer the LINK sent for the request back to the requester's address."
      },
      "constructor": "Deploy with the address of the LINK token",
      "fulfillArgcisRequest(bytes32,uint256,address,bytes4,uint256,bool,uint256,uint256)": {
        "notice": "Different Abi for input !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
      },
      "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": {
        "notice": "Called by the Chainlink node to fulfill requests"
      },
      "getAuthorizationStatus(address)": {
        "notice": "Use this to check if a node is authorized for fulfilling requests"
      },
      "getChainlinkToken()": {
        "notice": "Returns the address of the LINK token"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "notice": "Called when LINK is sent to the contract via `transferAndCall`"
      },
      "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": {
        "notice": "Creates the Chainlink request"
      },
      "setFulfillmentPermission(address,bool)": {
        "notice": "Sets the fulfillment permission for a given node. Use `true` to allow, `false` to disallow."
      },
      "withdraw(address,uint256)": {
        "notice": "Allows the node operator to withdraw earned LINK to a given address"
      },
      "withdrawable()": {
        "notice": "Displays the amount of LINK that is available for the node operator to withdraw"
      }
    }
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 302,
        "contract": "contracts/hybrid/OracleArgcis.sol:OracleArgcis",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 571,
        "contract": "contracts/hybrid/OracleArgcis.sol:OracleArgcis",
        "label": "LinkToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(LinkTokenInterface)234"
      },
      {
        "astId": 575,
        "contract": "contracts/hybrid/OracleArgcis.sol:OracleArgcis",
        "label": "commitments",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 579,
        "contract": "contracts/hybrid/OracleArgcis.sol:OracleArgcis",
        "label": "authorizedNodes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 582,
        "contract": "contracts/hybrid/OracleArgcis.sol:OracleArgcis",
        "label": "withdrawableTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)234": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}