{
  "address": "0x88c261CcC6Cb9c840fec09876Ed1Ae1Eb94FF80d",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoZeroChecks",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "StatusChange",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPROVER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUDITOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FINALIZER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[2]",
          "name": "_check",
          "type": "bytes32[2]"
        }
      ],
      "name": "addCheck",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allChecks",
      "outputs": [
        {
          "internalType": "bytes32[2][]",
          "name": "",
          "type": "bytes32[2][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "checks",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "focus",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getBalanceForToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getCheck",
      "outputs": [
        {
          "internalType": "bytes32[2]",
          "name": "",
          "type": "bytes32[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getDepositAddressFor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDonatedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeta",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_focus",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_safeAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedTokens",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_requestable",
          "type": "bool"
        },
        {
          "internalType": "bytes32[2][]",
          "name": "_checks",
          "type": "bytes32[2][]"
        },
        {
          "internalType": "address[]",
          "name": "_whitelist",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isTokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeCheck",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resume",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "enum FundV1.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x461bc660f279b22f26fb6c7467e9635505870dda5657ba464185f63d1e9bb5b6",
  "receipt": {
    "to": null,
    "from": "0xF8Ab4E15085eFe69348D19FaAd408C6DF6BD4DA3",
    "contractAddress": "0x88c261CcC6Cb9c840fec09876Ed1Ae1Eb94FF80d",
    "transactionIndex": 1,
    "gasUsed": "2012960",
    "logsBloom": "0x
    "blockHash": "0x6575157587a910d9ed4fdc3197700f64b43257d1a761e5938aadf2ecc965f5ab",
    "transactionHash": "0x461bc660f279b22f26fb6c7467e9635505870dda5657ba464185f63d1e9bb5b6",
    "logs": [],
    "blockNumber": 18286786,
    "cumulativeGasUsed": "2255912",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f6cd8fdf77e9ee24ff95086f9565d816",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoZeroChecks\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"StatusChange\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPROVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUDITOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINALIZER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"_check\",\"type\":\"bytes32[2]\"}],\"name\":\"addCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allChecks\",\"outputs\":[{\"internalType\":\"bytes32[2][]\",\"name\":\"\",\"type\":\"bytes32[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"focus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalanceForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getCheck\",\"outputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"\",\"type\":\"bytes32[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getDepositAddressFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDonatedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeta\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_focus\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_safeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedTokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_requestable\",\"type\":\"bool\"},{\"internalType\":\"bytes32[2][]\",\"name\":\"_checks\",\"type\":\"bytes32[2][]\"},{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum FundV1.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToken(address)\":{\"details\":\"add a token to the list of allowed tokens\",\"params\":{\"_address\":\"tracker address of the token\"},\"returns\":{\"_0\":\"boolean indicating result of the operation\"}},\"close()\":{\"details\":\"close fund\",\"returns\":{\"_0\":\"boolean indicating result of the operation\"}},\"getAllowedTokens()\":{\"details\":\"list of allowed token contract addresses\",\"returns\":{\"_0\":\"return a list of allowed token contract addresses\"}},\"getBalanceForToken(address)\":{\"details\":\"get fund total balances\",\"returns\":{\"_0\":\"uint256 balance of the given token\"}},\"getBalances()\":{\"details\":\"get fund safe balances\",\"returns\":{\"_0\":\"tuple of (tokenAddress[], balance[])\"}},\"getDepositAddressFor(address)\":{\"details\":\"get deposit address for a token\",\"params\":{\"_tokenAddress\":\"tracker address of the token to deposit (must be an allowed token)\"},\"returns\":{\"_0\":\"deposit address for a token\"}},\"getDonatedTokens()\":{\"details\":\"get fund total balances\",\"returns\":{\"_0\":\"array of tokenAddress[]\"}},\"getMeta()\":{\"details\":\"get metadata for a fund\",\"returns\":{\"_0\":\"metadata of the fund\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isOpen()\":{\"details\":\"check if a fund is open for donations\",\"returns\":{\"_0\":\"boolean indicating status\"}},\"isTokenAllowed(address)\":{\"details\":\"add a token to the list of allowed tokens\",\"params\":{\"_address\":\"tracker address of the token\"},\"returns\":{\"_0\":\"boolean indicating if a token is allowed for deposit\"}},\"isWhitelisted(address)\":{\"details\":\"check if address is whitelisted\",\"returns\":{\"_0\":\"boolean indicating status\"}},\"pause()\":{\"details\":\"pause fund\",\"returns\":{\"_0\":\"boolean indicating result of the operation\"}},\"removeToken(address)\":{\"details\":\"remove a token from the list of allowed tokens\",\"params\":{\"_address\":\"tracker address of the token\"},\"returns\":{\"_0\":\"boolean indicating result of the operation\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"resume()\":{\"details\":\"resume fund\",\"returns\":{\"_0\":\"boolean indicating result of the operation\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateBalance(address,uint256)\":{\"details\":\"called from Donation.sol and updates total balance for the given token address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close()\":{\"notice\":\"this is final, a closed fund cannot be reopened\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundV1.sol\":\"FundV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/FundV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {Checks} from \\\"./libraries/Checks.sol\\\";\\nimport {TokenControl} from \\\"./TokenControl.sol\\\";\\n\\nimport \\\"./Registered.sol\\\";\\n\\n// Master Fund (v1) Contract\\n// FundManager create clones of this contract.\\ncontract FundV1 is AccessControlEnumerable, TokenControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error NotAllowed();\\n    error NoZeroChecks();\\n    error Forbidden();\\n\\n    bytes32 public constant FACTORY_ROLE = keccak256(\\\"FACTORY_ROLE\\\");\\n\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"OWNER_ROLE\\\");\\n    bytes32 public constant AUDITOR_ROLE = keccak256(\\\"AUDITOR_ROLE\\\");\\n    bytes32 public constant APPROVER_ROLE = keccak256(\\\"APPROVER_ROLE\\\");\\n    bytes32 public constant FINALIZER_ROLE = keccak256(\\\"FINALIZER_ROLE\\\");\\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\\\"EXECUTOR_ROLE\\\");\\n\\n    Status public status;\\n    address private factory;\\n    address private safeAddress;\\n    bool public requestable;\\n    string public name;\\n    string public focus;\\n\\n    address[] private donatedTokens;\\n    mapping(address => uint256) private balancesMap;\\n\\n    bytes32[2][] public checks;\\n    EnumerableSet.AddressSet private whitelist;\\n\\n    enum Status {\\n        Open,\\n        Paused,\\n        Closed\\n    }\\n\\n    // called once by the factory at time of deployment\\n    // any subsequent calls will revert with Forbidden()\\n    function initialize(\\n        string memory _name,\\n        string memory _focus,\\n        address _safeAddress,\\n        address _owner,\\n        address[] memory _allowedTokens,\\n        bool _requestable,\\n        bytes32[2][] memory _checks,\\n        address[] memory _whitelist,\\n        address _factory\\n    ) external {\\n        if (factory != address(0)) revert Forbidden();\\n\\n        if (_requestable) {\\n            require(\\n                _checks.length > 0,\\n                \\\"A set of initial checks are required for a requestable Fund.\\\"\\n            );\\n        }\\n\\n        if (_whitelist.length > 0 || _checks.length > 0) {\\n            require(_requestable, \\\"Fund must be set as requestable.\\\");\\n        }\\n\\n        factory = _factory;\\n\\n        _setupRole(FACTORY_ROLE, factory);\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, _owner);\\n        _setupRole(OWNER_ROLE, _owner);\\n        _setupRole(AUDITOR_ROLE, _owner);\\n        _setupRole(APPROVER_ROLE, _owner);\\n        _setupRole(FINALIZER_ROLE, _owner);\\n        _setupRole(EXECUTOR_ROLE, _owner);\\n\\n        requestable = _requestable;\\n        name = _name;\\n        focus = _focus;\\n        safeAddress = _safeAddress;\\n        status = Status.Open;\\n\\n        _setChecks(_checks);\\n        _batchSet(whitelist, _whitelist);\\n        _batchSet(allowedTokens, _allowedTokens);\\n    }\\n\\n    // -----------------------------------------------------------------\\n    // PUBLIC API\\n    // -----------------------------------------------------------------\\n\\n    /**\\n     * @dev                   get metadata for a fund\\n     * @return                metadata of the fund\\n     */\\n    function getMeta() external view returns (string memory, string memory) {\\n        return (name, focus);\\n    }\\n\\n    /**\\n     * @dev                   get fund safe balances\\n     * @return                tuple of (tokenAddress[], balance[])\\n     */\\n    function getBalances()\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        uint256 length = allowedTokens.length();\\n        address[] memory addresses = new address[](length);\\n        uint256[] memory balances = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            addresses[i] = allowedTokens.at(i);\\n            balances[i] = IERC20(allowedTokens.at(i)).balanceOf(safeAddress);\\n        }\\n        return (addresses, balances);\\n    }\\n\\n    /**\\n     * @dev                   get fund total balances\\n     * @return                array of tokenAddress[]\\n     */\\n    function getDonatedTokens() external view returns (address[] memory) {\\n        return (donatedTokens);\\n    }\\n\\n    /**\\n     * @dev                   get fund total balances\\n     * @return                uint256 balance of the given token\\n     */\\n    function getBalanceForToken(address _tokenAddress)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return (balancesMap[_tokenAddress]);\\n    }\\n\\n    /**\\n     * @dev                   called from Donation.sol and updates total balance for the given token address\\n     */\\n    function updateBalance(address _tokenAddress, uint256 _amount)\\n        external\\n        onlyRole(FACTORY_ROLE)\\n    {\\n        if (balancesMap[_tokenAddress] == 0)\\n            donatedTokens.push(_tokenAddress);\\n        balancesMap[_tokenAddress] += _amount;\\n    }\\n\\n    /**\\n     * @dev                   get deposit address for a token\\n     * @param  _tokenAddress  tracker address of the token to deposit\\n                              (must be an allowed token)\\n     * @return                deposit address for a token\\n     */\\n    function getDepositAddressFor(address _tokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (status != Status.Open) revert NotAllowed();\\n        if (!isTokenAllowed(_tokenAddress)) revert NotAllowed();\\n        if (safeAddress == address(0)) revert NotAllowed();\\n        return safeAddress;\\n    }\\n\\n    /**\\n     * @dev                   check if a fund is open for donations\\n     * @return                boolean indicating status\\n     */\\n    function isOpen() external view returns (bool) {\\n        return status == Status.Open;\\n    }\\n\\n    /**\\n     * @dev                   check if address is whitelisted\\n     * @return                boolean indicating status\\n     */\\n    function isWhitelisted(address _address) external view returns (bool) {\\n        if (whitelist.length() == 0) return true;\\n        return whitelist.contains(_address);\\n    }\\n\\n    // -----------------------------------------------------------------\\n    // ACCESS CONTROLLED\\n    // -----------------------------------------------------------------\\n\\n    /**\\n     * @dev             pause fund\\n     * @return          boolean indicating result of the operation\\n     */\\n    function pause() external onlyRole(OWNER_ROLE) returns (bool) {\\n        if (status != Status.Open) revert NotAllowed();\\n\\n        return _setStatus(Status.Paused);\\n    }\\n\\n    /**\\n     * @dev             resume fund\\n     * @return          boolean indicating result of the operation\\n     */\\n    function resume() external onlyRole(OWNER_ROLE) returns (bool) {\\n        if (status != Status.Paused) revert NotAllowed();\\n\\n        return _setStatus(Status.Open);\\n    }\\n\\n    /**\\n     * @notice          this is final, a closed fund cannot be reopened\\n     * @dev             close fund\\n     * @return          boolean indicating result of the operation\\n     */\\n    function close() external onlyRole(OWNER_ROLE) returns (bool) {\\n        if (status == Status.Closed) revert NotAllowed();\\n        return _setStatus(Status.Closed);\\n    }\\n\\n    // -----------------------------------------------------------------\\n    // INTERNAL\\n    // -----------------------------------------------------------------\\n\\n    /**\\n     * @dev             set fund status\\n     * @param  _status  status to set\\n     * @return          boolean indicating result of the operation\\n     */\\n    function _setStatus(Status _status) internal returns (bool) {\\n        status = _status;\\n\\n        emit StatusChange(uint256(_status));\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev             batch set insertion\\n     * @param  _set     pointer to storage EnumerableSet\\n     * @param  _values  array of values to insert\\n     */\\n    function _batchSet(\\n        EnumerableSet.AddressSet storage _set,\\n        address[] memory _values\\n    ) internal {\\n        uint256 length = _values.length;\\n        uint256 i = 0;\\n        while (i < length) {\\n            _set.add(_values[i]);\\n            i++;\\n        }\\n    }\\n\\n    // -----------------------------------------------------------------\\n    // EVENTS\\n    // -----------------------------------------------------------------\\n\\n    event StatusChange(uint256 indexed id);\\n\\n    function getCheck(uint256 _index) public view returns (bytes32[2] memory) {\\n        return checks[_index];\\n    }\\n\\n    function allChecks() public view returns (bytes32[2][] memory) {\\n        return checks;\\n    }\\n\\n    function addCheck(bytes32[2] memory _check)\\n        public\\n        onlyRole(AUDITOR_ROLE)\\n        returns (bool)\\n    {\\n        checks.push(_check);\\n\\n        return true;\\n    }\\n\\n    function removeCheck(uint256 _index)\\n        public\\n        onlyRole(AUDITOR_ROLE)\\n        returns (bool)\\n    {\\n        if (checks.length <= 1) revert NoZeroChecks();\\n\\n        _shiftPop(checks, _index);\\n        return true;\\n    }\\n\\n    function _setChecks(bytes32[2][] memory _initialChecks) internal {\\n        checks = _initialChecks;\\n    }\\n\\n    function _shiftPop(bytes32[2][] storage _array, uint256 _index) internal {\\n        require(_array.length > 0);\\n        require(_index <= _array.length - 1);\\n\\n        _array[_index] = _array[_array.length - 1];\\n        _array.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xf5ff977a0c668484136c027b989d1ab6c8f8a46f51a57de17b8afcdbf80244ff\",\"license\":\"MIT\"},\"contracts/Registered.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Registry.sol\\\";\\n\\ncontract Registered {\\n    Registry registry;\\n\\n    // -----------------------------------------------------------------\\n    // INTERNAL API\\n    // -----------------------------------------------------------------\\n\\n    /**\\n     * @dev           get an address from registry\\n     * @param  _name  registered name\\n     * @return        registered address\\n     */\\n    function _getAddress(bytes32 _name) internal view returns (address) {\\n        return registry.get(_name);\\n    }\\n\\n    /**\\n     * @dev               set registry\\n     * @param  _registry  registry address\\n     */\\n    function _setRegistry(address _registry) internal {\\n        registry = Registry(_registry);\\n    }\\n}\\n\",\"keccak256\":\"0xee02aec6b921d43994fa50a466c8b606909311e5bd22e54fa0235afc8119b57d\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror NotFound();\\n\\ncontract Registry is Ownable {\\n    bytes32[] private contracts;\\n    mapping(bytes32 => address) private registry;\\n\\n    /**\\n     * @dev              get a list of registered contract names\\n     * @return           a list of registered contract names\\n     */\\n    function registered() public view returns (bytes32[] memory) {\\n        return contracts;\\n    }\\n\\n    /**\\n     * @dev              get contract address\\n     * @param _name      name of the contract\\n     * @return           address of the queried contract\\n     */\\n    function get(bytes32 _name) public view returns (address) {\\n        if (registry[_name] == address(0x0)) revert NotFound();\\n\\n        return registry[_name];\\n    }\\n\\n    /**\\n     * @dev              get contract address\\n     * @param _names     name of the contract\\n     * @return           addresses of the queried contracts\\n     */\\n    function batchGet(bytes32[] memory _names)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 length = _names.length;\\n        address[] memory addresses = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            addresses[i] = get(_names[i]);\\n        }\\n        return addresses;\\n    }\\n\\n    /**\\n     * @dev              register contract address\\n     * @param _name      name of the contract\\n     * @param _address   address of the contract\\n     * @return           boolean indicating result of the operation\\n     */\\n    function register(bytes32 _name, address _address)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        if (registry[_name] != address(0)) return true;\\n\\n        registry[_name] = _address;\\n        contracts.push(_name);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev              register contract addresses\\n     * @param _name      array of name of contracts\\n     * @param _address   address arrays of contracts\\n     * @return           boolean indicating result of the operation\\n     */\\n    function batchRegister(bytes32[] memory _name, address[] memory _address)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256 length = _name.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (registry[_name[i]] != address(0)) continue;\\n            registry[_name[i]] = _address[i];\\n            contracts.push(_name[i]);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev              update contract address\\n     * @param _name      name of the contract\\n     * @param _address   address of the contract\\n     * @return           boolean indicating result of the operation\\n     */\\n    function update(bytes32 _name, address _address)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        if (registry[_name] == address(0x0)) revert NotFound();\\n\\n        registry[_name] = _address;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev              update contracts' addresses\\n     * @param _name      array of name of contracts\\n     * @param _address   address arrays of contracts\\n     * @return           boolean indicating result of the operation\\n     */\\n    function batchUpdate(bytes32[] memory _name, address[] memory _address)\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        uint256 length = _name.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (registry[_name[i]] == address(0x0)) continue;\\n            registry[_name[i]] = _address[i];\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x31e673241867a556f394773fa89bd6a0ab44555d0510c9ec0c6502806e9a8acf\",\"license\":\"MIT\"},\"contracts/TokenControl.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract TokenControl is AccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    error TokenNotAllowed();\\n\\n    EnumerableSet.AddressSet internal allowedTokens;\\n\\n    // -----------------------------------------------------------------\\n    // PUBLIC API\\n    // -----------------------------------------------------------------\\n\\n    /**\\n     * @dev     list of allowed token contract addresses\\n     * @return  return a list of allowed token contract addresses\\n     */\\n    function getAllowedTokens() public view returns (address[] memory) {\\n        return allowedTokens.values();\\n    }\\n\\n    /**\\n     * @dev              add a token to the list of allowed tokens\\n     * @param  _address  tracker address of the token\\n     * @return           boolean indicating if a token is allowed for deposit\\n     */\\n    function isTokenAllowed(address _address) public view returns (bool) {\\n        return allowedTokens.contains(_address);\\n    }\\n\\n    // -----------------------------------------------------------------\\n    // ADMIN API\\n    // -----------------------------------------------------------------\\n\\n    /**\\n     * @dev              add a token to the list of allowed tokens\\n     * @param  _address  tracker address of the token\\n     * @return           boolean indicating result of the operation\\n     */\\n    function addToken(address _address)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        returns (bool)\\n    {\\n        return allowedTokens.add(_address);\\n    }\\n\\n    /**\\n     * @dev              remove a token from the list of allowed tokens\\n     * @param  _address  tracker address of the token\\n     * @return           boolean indicating result of the operation\\n     */\\n    function removeToken(address _address)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        returns (bool)\\n    {\\n        return allowedTokens.remove(_address);\\n    }\\n}\\n\",\"keccak256\":\"0x6d9425bd1ced3bcbb785d86755c47d2875ffcb76eca7d9e5018e92f12c08b249\",\"license\":\"MIT\"},\"contracts/libraries/Checks.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary Checks {\\n    function isAutomated(bytes32[2] memory _check)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return _check[1] != \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x04bc495245167cd33cbaa08034ad9a0c539db906c6c886d10d92ac2ddba433ed\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612375806100206000396000f3fe608060405234801561001057600080fd5b50600436106102475760003560e01c806347535d7b1161013b578063a79af2ce116100b8578063d547741f1161007c578063d547741f1461057d578063e0b1cccb14610590578063e58378bb146105a3578063ec851afe146105b8578063f9eaee0d146105c057600080fd5b8063a79af2ce1461051a578063a8bd926f14610530578063b6e4908714610543578063ca15c87314610557578063d48bfca71461056a57600080fd5b80639010d07c116100ff5780639010d07c146104b957806391d14854146104cc57806393ddbd96146104df5780639db797f0146104f2578063a217fddf1461051257600080fd5b806347535d7b146104795780635fa7b584146104815780636e1d616e14610494578063805421ed146104a95780638456cb59146104b157600080fd5b8063240626d2116101c95780633af32abf1161018d5780633af32abf146103fd5780633b5862c1146104105780633df55efd146104235780634245962b1461044a57806343d726d61461047157600080fd5b8063240626d214610376578063248a9ca31461038b5780632f2ff15d146103ae57806332dcdf7a146103c157806336568abe146103ea57600080fd5b806304a0fb171161021057806304a0fb17146102c057806306fdde03146102f557806307bd02651461030a578063200d2ed214610331578063233fd7ed1461034b57600080fd5b8062113e081461024c578063015887d61461026b57806301ffc9a714610280578063024ece89146102a3578063046f7da2146102b8575b600080fd5b6102546105d3565b604051610262929190611b4b565b60405180910390f35b610273610764565b6040516102629190611ba2565b61029361028e366004611c0b565b6107e1565b6040519015158152602001610262565b6102ab61080c565b6040516102629190611c35565b61029361081d565b6102e77fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2781565b604051908152602001610262565b6102fd610880565b6040516102629190611ca0565b6102e77fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60045461033e9060ff1681565b6040516102629190611cc9565b61035e610359366004611d0d565b61090e565b6040516001600160a01b039091168152602001610262565b610389610384366004611f59565b6109a6565b005b6102e761039936600461206e565b60009081526020819052604090206001015490565b6103896103bc366004612087565b610c57565b6102e76103cf366004611d0d565b6001600160a01b031660009081526009602052604090205490565b6103896103f8366004612087565b610c82565b61029361040b366004611d0d565b610d00565b61029361041e36600461206e565b610d23565b6102e77f53ea8c2084bd069d8c2df22bdca7223415cd9c0b605c29d1a0d06f15fcd3eed481565b6102e77f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf81565b610293610d77565b610293610dd4565b61029361048f366004611d0d565b610df4565b6102e760008051602061232083398151915281565b6102fd610e13565b610293610e20565b61035e6104c73660046120b3565b610e7c565b6102936104da366004612087565b610e94565b6102e76104ed3660046120b3565b610ebd565b61050561050036600461206e565b610ef2565b60405161026291906120d5565b6102e7600081565b610522610f50565b604051610262929190612106565b61029361053e366004612134565b611077565b60055461029390600160a01b900460ff1681565b6102e761056536600461206e565b6110df565b610293610578366004611d0d565b6110f6565b61038961058b366004612087565b61110e565b61038961059e366004612150565b611134565b6102e760008051602061230083398151915281565b6102ab6111fa565b6102936105ce366004611d0d565b61125c565b60608060006105e26002611269565b905060008167ffffffffffffffff8111156105ff576105ff611d28565b604051908082528060200260200182016040528015610628578160200160208202803683370190505b50905060008267ffffffffffffffff81111561064657610646611d28565b60405190808252806020026020018201604052801561066f578160200160208202803683370190505b50905060005b8381101561075957610688600282611273565b83828151811061069a5761069a61217a565b6001600160a01b03909216602092830291909101909101526106bd600282611273565b6005546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190612190565b82828151811061073c5761073c61217a565b602090810291909101015280610751816121bf565b915050610675565b509094909350915050565b6060600a805480602002602001604051908101604052809291908181526020016000905b828210156107d85760008481526020902060408051808201918290529160028581029091019182845b8154815260200190600101908083116107b157505050505081526020019060010190610788565b50505050905090565b60006001600160e01b03198216635a05180f60e01b148061080657506108068261127f565b92915050565b606061081860026112b4565b905090565b600060008051602061230083398151915261083881336112c1565b600160045460ff16600281111561085157610851611cb3565b1461086f57604051631eb49d6d60e11b815260040160405180910390fd5b6108796000611325565b91505b5090565b6006805461088d906121da565b80601f01602080910402602001604051908101604052809291908181526020018280546108b9906121da565b80156109065780601f106108db57610100808354040283529160200191610906565b820191906000526020600020905b8154815290600101906020018083116108e957829003601f168201915b505050505081565b60008060045460ff16600281111561092857610928611cb3565b1461094657604051631eb49d6d60e11b815260040160405180910390fd5b61094f8261125c565b61096c57604051631eb49d6d60e11b815260040160405180910390fd5b6005546001600160a01b031661099557604051631eb49d6d60e11b815260040160405180910390fd5b50506005546001600160a01b031690565b60045461010090046001600160a01b0316156109d557604051631dd2188d60e31b815260040160405180910390fd5b8315610a57576000835111610a575760405162461bcd60e51b815260206004820152603c60248201527f4120736574206f6620696e697469616c20636865636b7320617265207265717560448201527f6972656420666f722061207265717565737461626c652046756e642e0000000060648201526084015b60405180910390fd5b600082511180610a68575060008351115b15610aba5783610aba5760405162461bcd60e51b815260206004820181905260248201527f46756e64206d75737420626520736574206173207265717565737461626c652e6044820152606401610a4e565b60048054610100600160a81b0319166101006001600160a01b0384811682029290921792839055610b10927fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27929190041661138e565b610b1b60008761138e565b610b336000805160206123008339815191528761138e565b610b4b6000805160206123208339815191528761138e565b610b757f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf8761138e565b610b9f7f53ea8c2084bd069d8c2df22bdca7223415cd9c0b605c29d1a0d06f15fcd3eed48761138e565b610bc97fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e638761138e565b6005805460ff60a01b1916600160a01b861515021790558851610bf39060069060208c019061198c565b508751610c079060079060208b019061198c565b50600580546001600160a01b0319166001600160a01b0389161790556004805460ff19169055610c3683611398565b610c41600b836113ab565b610c4c6002866113ab565b505050505050505050565b600082815260208190526040902060010154610c7381336112c1565b610c7d83836113fd565b505050565b6001600160a01b0381163314610cf25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a4e565b610cfc828261141f565b5050565b6000610d0c600b611269565b610d1857506001919050565b610806600b83611441565b6000600080516020612320833981519152610d3e81336112c1565b600a54600110610d6157604051631acfaa2560e21b815260040160405180910390fd5b610d6c600a84611463565b600191505b50919050565b6000600080516020612300833981519152610d9281336112c1565b600260045460ff166002811115610dab57610dab611cb3565b1415610dca57604051631eb49d6d60e11b815260040160405180910390fd5b6108796002611325565b60008060045460ff166002811115610dee57610dee611cb3565b14905090565b600080610e0181336112c1565b610e0c600284611517565b9392505050565b6007805461088d906121da565b6000600080516020612300833981519152610e3b81336112c1565b600060045460ff166002811115610e5457610e54611cb3565b14610e7257604051631eb49d6d60e11b815260040160405180910390fd5b6108796001611325565b6000828152600160205260408120610e0c9083611273565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600a8281548110610ecd57600080fd5b90600052602060002090600202018160028110610ee957600080fd5b01549150829050565b610efa611a0c565b600a8281548110610f0d57610f0d61217a565b600091825260209091206040805180820191829052926002908102909201919082845b815481526020019060010190808311610f30575b50505050509050919050565b60608060066007818054610f63906121da565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8f906121da565b8015610fdc5780601f10610fb157610100808354040283529160200191610fdc565b820191906000526020600020905b815481529060010190602001808311610fbf57829003601f168201915b50505050509150808054610fef906121da565b80601f016020809104026020016040519081016040528092919081815260200182805461101b906121da565b80156110685780601f1061103d57610100808354040283529160200191611068565b820191906000526020600020905b81548152906001019060200180831161104b57829003601f168201915b50505050509050915091509091565b600060008051602061232083398151915261109281336112c1565b600a80546001810182556000919091526110d59060029081027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801908590611a2a565b5060019392505050565b600081815260016020526040812061080690611269565b60008061110381336112c1565b610e0c60028461152c565b60008281526020819052604090206001015461112a81336112c1565b610c7d838361141f565b7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2761115f81336112c1565b6001600160a01b0383166000908152600960205260409020546111c857600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038316600090815260096020526040812080548492906111f090849061220f565b9091555050505050565b6060600880548060200260200160405190810160405280929190818152602001828054801561125257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611234575b5050505050905090565b6000610806600283611441565b6000610806825490565b6000610e0c8383611541565b60006001600160e01b03198216637965db0b60e01b148061080657506301ffc9a760e01b6001600160e01b0319831614610806565b60606000610e0c8361156b565b6112cb8282610e94565b610cfc576112e3816001600160a01b031660146115c5565b6112ee8360206115c5565b6040516020016112ff929190612227565b60408051601f198184030181529082905262461bcd60e51b8252610a4e91600401611ca0565b60048054600091839160ff1916600183600281111561134657611346611cb3565b021790555081600281111561135d5761135d611cb3565b6040517f4884fc8861710f82d3dd1858f3e1978853d51909a2e9a0efafe95d8cce5f3b9a90600090a2506001919050565b610cfc82826113fd565b8051610cfc90600a906020840190611a57565b805160005b818110156113f7576113e48382815181106113cd576113cd61217a565b60200260200101518561152c90919063ffffffff16565b50806113ef816121bf565b9150506113b0565b50505050565b6114078282611761565b6000828152600160205260409020610c7d908261152c565b61142982826117e5565b6000828152600160205260409020610c7d9082611517565b6001600160a01b03811660009081526001830160205260408120541515610e0c565b815461146e57600080fd5b815461147c9060019061229c565b81111561148857600080fd5b815482906114989060019061229c565b815481106114a8576114a861217a565b90600052602060002090600202018282815481106114c8576114c861217a565b90600052602060002090600202019060026114e4929190611aad565b50818054806114f5576114f56122b3565b6000828152602081206002600019909301928302018181556001015590555050565b6000610e0c836001600160a01b03841661184a565b6000610e0c836001600160a01b03841661193d565b60008260000182815481106115585761155861217a565b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f445760200282019190600052602060002090815481526020019060010190808311610f305750505050509050919050565b606060006115d48360026122c9565b6115df90600261220f565b67ffffffffffffffff8111156115f7576115f7611d28565b6040519080825280601f01601f191660200182016040528015611621576020820181803683370190505b509050600360fc1b8160008151811061163c5761163c61217a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061166b5761166b61217a565b60200101906001600160f81b031916908160001a905350600061168f8460026122c9565b61169a90600161220f565b90505b6001811115611712576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116ce576116ce61217a565b1a60f81b8282815181106116e4576116e461217a565b60200101906001600160f81b031916908160001a90535060049490941c9361170b816122e8565b905061169d565b508315610e0c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a4e565b61176b8282610e94565b610cfc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117a13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117ef8282610e94565b15610cfc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818152600183016020526040812054801561193357600061186e60018361229c565b85549091506000906118829060019061229c565b90508181146118e75760008660000182815481106118a2576118a261217a565b90600052602060002001549050808760000184815481106118c5576118c561217a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118f8576118f86122b3565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610806565b6000915050610806565b600081815260018301602052604081205461198457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610806565b506000610806565b828054611998906121da565b90600052602060002090601f0160209004810192826119ba5760008555611a00565b82601f106119d357805160ff1916838001178555611a00565b82800160010185558215611a00579182015b82811115611a005782518255916020019190600101906119e5565b5061087c929150611ad8565b60405180604001604052806002906020820280368337509192915050565b8260028101928215611a005791602002820182811115611a005782518255916020019190600101906119e5565b828054828255906000526020600020906002028101928215611aa1579160200282015b82811115611aa1578251611a919083906002611a2a565b5091602001919060020190611a7a565b5061087c929150611aed565b8260028101928215611a00579182015b82811115611a00578254825591600101919060010190611abd565b5b8082111561087c5760008155600101611ad9565b8082111561087c5760008082556001820155600201611aed565b600081518084526020808501945080840160005b83811015611b405781516001600160a01b031687529582019590820190600101611b1b565b509495945050505050565b604081526000611b5e6040830185611b07565b82810360208481019190915284518083528582019282019060005b81811015611b9557845183529383019391830191600101611b79565b5090979650505050505050565b60208082528251828201819052600091906040908185019086840185805b83811015611bfd57825185835b6002811015611bea57825182529189019190890190600101611bcd565b5050509385019391860191600101611bc0565b509298975050505050505050565b600060208284031215611c1d57600080fd5b81356001600160e01b031981168114610e0c57600080fd5b602081526000610e0c6020830184611b07565b60005b83811015611c63578181015183820152602001611c4b565b838111156113f75750506000910152565b60008151808452611c8c816020860160208601611c48565b601f01601f19169290920160200192915050565b602081526000610e0c6020830184611c74565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611ceb57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160a01b0381168114611d0857600080fd5b919050565b600060208284031215611d1f57600080fd5b610e0c82611cf1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d6757611d67611d28565b604052919050565b600082601f830112611d8057600080fd5b813567ffffffffffffffff811115611d9a57611d9a611d28565b611dad601f8201601f1916602001611d3e565b818152846020838601011115611dc257600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff821115611df957611df9611d28565b5060051b60200190565b600082601f830112611e1457600080fd5b81356020611e29611e2483611ddf565b611d3e565b82815260059290921b84018101918181019086841115611e4857600080fd5b8286015b84811015611e6a57611e5d81611cf1565b8352918301918301611e4c565b509695505050505050565b80358015158114611d0857600080fd5b600082601f830112611e9657600080fd5b6040516040810181811067ffffffffffffffff82111715611eb957611eb9611d28565b8060405250806040840185811115611ed057600080fd5b845b81811015611eea578035835260209283019201611ed2565b509195945050505050565b600082601f830112611f0657600080fd5b81356020611f16611e2483611ddf565b82815260069290921b84018101918181019086841115611f3557600080fd5b8286015b84811015611e6a57611f4b8882611e85565b835291830191604001611f39565b60008060008060008060008060006101208a8c031215611f7857600080fd5b893567ffffffffffffffff80821115611f9057600080fd5b611f9c8d838e01611d6f565b9a5060208c0135915080821115611fb257600080fd5b611fbe8d838e01611d6f565b9950611fcc60408d01611cf1565b9850611fda60608d01611cf1565b975060808c0135915080821115611ff057600080fd5b611ffc8d838e01611e03565b965061200a60a08d01611e75565b955060c08c013591508082111561202057600080fd5b61202c8d838e01611ef5565b945060e08c013591508082111561204257600080fd5b5061204f8c828d01611e03565b92505061205f6101008b01611cf1565b90509295985092959850929598565b60006020828403121561208057600080fd5b5035919050565b6000806040838503121561209a57600080fd5b823591506120aa60208401611cf1565b90509250929050565b600080604083850312156120c657600080fd5b50508035926020909101359150565b60408101818360005b60028110156120fd5781518352602092830192909101906001016120de565b50505092915050565b6040815260006121196040830185611c74565b828103602084015261212b8185611c74565b95945050505050565b60006040828403121561214657600080fd5b610e0c8383611e85565b6000806040838503121561216357600080fd5b61216c83611cf1565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156121a257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156121d3576121d36121a9565b5060010190565b600181811c908216806121ee57607f821691505b60208210811415610d7157634e487b7160e01b600052602260045260246000fd5b60008219821115612222576122226121a9565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161225f816017850160208801611c48565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612290816028840160208801611c48565b01602801949350505050565b6000828210156122ae576122ae6121a9565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156122e3576122e36121a9565b500290565b6000816122f7576122f76121a9565b50600019019056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a26469706673582212200868bf2484bc6fabd6502ff88c8d3d0c036ff33cc3054f3e84387a3624d3b03e64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102475760003560e01c806347535d7b1161013b578063a79af2ce116100b8578063d547741f1161007c578063d547741f1461057d578063e0b1cccb14610590578063e58378bb146105a3578063ec851afe146105b8578063f9eaee0d146105c057600080fd5b8063a79af2ce1461051a578063a8bd926f14610530578063b6e4908714610543578063ca15c87314610557578063d48bfca71461056a57600080fd5b80639010d07c116100ff5780639010d07c146104b957806391d14854146104cc57806393ddbd96146104df5780639db797f0146104f2578063a217fddf1461051257600080fd5b806347535d7b146104795780635fa7b584146104815780636e1d616e14610494578063805421ed146104a95780638456cb59146104b157600080fd5b8063240626d2116101c95780633af32abf1161018d5780633af32abf146103fd5780633b5862c1146104105780633df55efd146104235780634245962b1461044a57806343d726d61461047157600080fd5b8063240626d214610376578063248a9ca31461038b5780632f2ff15d146103ae57806332dcdf7a146103c157806336568abe146103ea57600080fd5b806304a0fb171161021057806304a0fb17146102c057806306fdde03146102f557806307bd02651461030a578063200d2ed214610331578063233fd7ed1461034b57600080fd5b8062113e081461024c578063015887d61461026b57806301ffc9a714610280578063024ece89146102a3578063046f7da2146102b8575b600080fd5b6102546105d3565b604051610262929190611b4b565b60405180910390f35b610273610764565b6040516102629190611ba2565b61029361028e366004611c0b565b6107e1565b6040519015158152602001610262565b6102ab61080c565b6040516102629190611c35565b61029361081d565b6102e77fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2781565b604051908152602001610262565b6102fd610880565b6040516102629190611ca0565b6102e77fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60045461033e9060ff1681565b6040516102629190611cc9565b61035e610359366004611d0d565b61090e565b6040516001600160a01b039091168152602001610262565b610389610384366004611f59565b6109a6565b005b6102e761039936600461206e565b60009081526020819052604090206001015490565b6103896103bc366004612087565b610c57565b6102e76103cf366004611d0d565b6001600160a01b031660009081526009602052604090205490565b6103896103f8366004612087565b610c82565b61029361040b366004611d0d565b610d00565b61029361041e36600461206e565b610d23565b6102e77f53ea8c2084bd069d8c2df22bdca7223415cd9c0b605c29d1a0d06f15fcd3eed481565b6102e77f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf81565b610293610d77565b610293610dd4565b61029361048f366004611d0d565b610df4565b6102e760008051602061232083398151915281565b6102fd610e13565b610293610e20565b61035e6104c73660046120b3565b610e7c565b6102936104da366004612087565b610e94565b6102e76104ed3660046120b3565b610ebd565b61050561050036600461206e565b610ef2565b60405161026291906120d5565b6102e7600081565b610522610f50565b604051610262929190612106565b61029361053e366004612134565b611077565b60055461029390600160a01b900460ff1681565b6102e761056536600461206e565b6110df565b610293610578366004611d0d565b6110f6565b61038961058b366004612087565b61110e565b61038961059e366004612150565b611134565b6102e760008051602061230083398151915281565b6102ab6111fa565b6102936105ce366004611d0d565b61125c565b60608060006105e26002611269565b905060008167ffffffffffffffff8111156105ff576105ff611d28565b604051908082528060200260200182016040528015610628578160200160208202803683370190505b50905060008267ffffffffffffffff81111561064657610646611d28565b60405190808252806020026020018201604052801561066f578160200160208202803683370190505b50905060005b8381101561075957610688600282611273565b83828151811061069a5761069a61217a565b6001600160a01b03909216602092830291909101909101526106bd600282611273565b6005546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072a9190612190565b82828151811061073c5761073c61217a565b602090810291909101015280610751816121bf565b915050610675565b509094909350915050565b6060600a805480602002602001604051908101604052809291908181526020016000905b828210156107d85760008481526020902060408051808201918290529160028581029091019182845b8154815260200190600101908083116107b157505050505081526020019060010190610788565b50505050905090565b60006001600160e01b03198216635a05180f60e01b148061080657506108068261127f565b92915050565b606061081860026112b4565b905090565b600060008051602061230083398151915261083881336112c1565b600160045460ff16600281111561085157610851611cb3565b1461086f57604051631eb49d6d60e11b815260040160405180910390fd5b6108796000611325565b91505b5090565b6006805461088d906121da565b80601f01602080910402602001604051908101604052809291908181526020018280546108b9906121da565b80156109065780601f106108db57610100808354040283529160200191610906565b820191906000526020600020905b8154815290600101906020018083116108e957829003601f168201915b505050505081565b60008060045460ff16600281111561092857610928611cb3565b1461094657604051631eb49d6d60e11b815260040160405180910390fd5b61094f8261125c565b61096c57604051631eb49d6d60e11b815260040160405180910390fd5b6005546001600160a01b031661099557604051631eb49d6d60e11b815260040160405180910390fd5b50506005546001600160a01b031690565b60045461010090046001600160a01b0316156109d557604051631dd2188d60e31b815260040160405180910390fd5b8315610a57576000835111610a575760405162461bcd60e51b815260206004820152603c60248201527f4120736574206f6620696e697469616c20636865636b7320617265207265717560448201527f6972656420666f722061207265717565737461626c652046756e642e0000000060648201526084015b60405180910390fd5b600082511180610a68575060008351115b15610aba5783610aba5760405162461bcd60e51b815260206004820181905260248201527f46756e64206d75737420626520736574206173207265717565737461626c652e6044820152606401610a4e565b60048054610100600160a81b0319166101006001600160a01b0384811682029290921792839055610b10927fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee27929190041661138e565b610b1b60008761138e565b610b336000805160206123008339815191528761138e565b610b4b6000805160206123208339815191528761138e565b610b757f408a36151f841709116a4e8aca4e0202874f7f54687dcb863b1ea4672dc9d8cf8761138e565b610b9f7f53ea8c2084bd069d8c2df22bdca7223415cd9c0b605c29d1a0d06f15fcd3eed48761138e565b610bc97fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e638761138e565b6005805460ff60a01b1916600160a01b861515021790558851610bf39060069060208c019061198c565b508751610c079060079060208b019061198c565b50600580546001600160a01b0319166001600160a01b0389161790556004805460ff19169055610c3683611398565b610c41600b836113ab565b610c4c6002866113ab565b505050505050505050565b600082815260208190526040902060010154610c7381336112c1565b610c7d83836113fd565b505050565b6001600160a01b0381163314610cf25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a4e565b610cfc828261141f565b5050565b6000610d0c600b611269565b610d1857506001919050565b610806600b83611441565b6000600080516020612320833981519152610d3e81336112c1565b600a54600110610d6157604051631acfaa2560e21b815260040160405180910390fd5b610d6c600a84611463565b600191505b50919050565b6000600080516020612300833981519152610d9281336112c1565b600260045460ff166002811115610dab57610dab611cb3565b1415610dca57604051631eb49d6d60e11b815260040160405180910390fd5b6108796002611325565b60008060045460ff166002811115610dee57610dee611cb3565b14905090565b600080610e0181336112c1565b610e0c600284611517565b9392505050565b6007805461088d906121da565b6000600080516020612300833981519152610e3b81336112c1565b600060045460ff166002811115610e5457610e54611cb3565b14610e7257604051631eb49d6d60e11b815260040160405180910390fd5b6108796001611325565b6000828152600160205260408120610e0c9083611273565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600a8281548110610ecd57600080fd5b90600052602060002090600202018160028110610ee957600080fd5b01549150829050565b610efa611a0c565b600a8281548110610f0d57610f0d61217a565b600091825260209091206040805180820191829052926002908102909201919082845b815481526020019060010190808311610f30575b50505050509050919050565b60608060066007818054610f63906121da565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8f906121da565b8015610fdc5780601f10610fb157610100808354040283529160200191610fdc565b820191906000526020600020905b815481529060010190602001808311610fbf57829003601f168201915b50505050509150808054610fef906121da565b80601f016020809104026020016040519081016040528092919081815260200182805461101b906121da565b80156110685780601f1061103d57610100808354040283529160200191611068565b820191906000526020600020905b81548152906001019060200180831161104b57829003601f168201915b50505050509050915091509091565b600060008051602061232083398151915261109281336112c1565b600a80546001810182556000919091526110d59060029081027fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801908590611a2a565b5060019392505050565b600081815260016020526040812061080690611269565b60008061110381336112c1565b610e0c60028461152c565b60008281526020819052604090206001015461112a81336112c1565b610c7d838361141f565b7fdfbefbf47cfe66b701d8cfdbce1de81c821590819cb07e71cb01b6602fb0ee2761115f81336112c1565b6001600160a01b0383166000908152600960205260409020546111c857600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0385161790555b6001600160a01b038316600090815260096020526040812080548492906111f090849061220f565b9091555050505050565b6060600880548060200260200160405190810160405280929190818152602001828054801561125257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611234575b5050505050905090565b6000610806600283611441565b6000610806825490565b6000610e0c8383611541565b60006001600160e01b03198216637965db0b60e01b148061080657506301ffc9a760e01b6001600160e01b0319831614610806565b60606000610e0c8361156b565b6112cb8282610e94565b610cfc576112e3816001600160a01b031660146115c5565b6112ee8360206115c5565b6040516020016112ff929190612227565b60408051601f198184030181529082905262461bcd60e51b8252610a4e91600401611ca0565b60048054600091839160ff1916600183600281111561134657611346611cb3565b021790555081600281111561135d5761135d611cb3565b6040517f4884fc8861710f82d3dd1858f3e1978853d51909a2e9a0efafe95d8cce5f3b9a90600090a2506001919050565b610cfc82826113fd565b8051610cfc90600a906020840190611a57565b805160005b818110156113f7576113e48382815181106113cd576113cd61217a565b60200260200101518561152c90919063ffffffff16565b50806113ef816121bf565b9150506113b0565b50505050565b6114078282611761565b6000828152600160205260409020610c7d908261152c565b61142982826117e5565b6000828152600160205260409020610c7d9082611517565b6001600160a01b03811660009081526001830160205260408120541515610e0c565b815461146e57600080fd5b815461147c9060019061229c565b81111561148857600080fd5b815482906114989060019061229c565b815481106114a8576114a861217a565b90600052602060002090600202018282815481106114c8576114c861217a565b90600052602060002090600202019060026114e4929190611aad565b50818054806114f5576114f56122b3565b6000828152602081206002600019909301928302018181556001015590555050565b6000610e0c836001600160a01b03841661184a565b6000610e0c836001600160a01b03841661193d565b60008260000182815481106115585761155861217a565b9060005260206000200154905092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f445760200282019190600052602060002090815481526020019060010190808311610f305750505050509050919050565b606060006115d48360026122c9565b6115df90600261220f565b67ffffffffffffffff8111156115f7576115f7611d28565b6040519080825280601f01601f191660200182016040528015611621576020820181803683370190505b509050600360fc1b8160008151811061163c5761163c61217a565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061166b5761166b61217a565b60200101906001600160f81b031916908160001a905350600061168f8460026122c9565b61169a90600161220f565b90505b6001811115611712576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106116ce576116ce61217a565b1a60f81b8282815181106116e4576116e461217a565b60200101906001600160f81b031916908160001a90535060049490941c9361170b816122e8565b905061169d565b508315610e0c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a4e565b61176b8282610e94565b610cfc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117a13390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6117ef8282610e94565b15610cfc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000818152600183016020526040812054801561193357600061186e60018361229c565b85549091506000906118829060019061229c565b90508181146118e75760008660000182815481106118a2576118a261217a565b90600052602060002001549050808760000184815481106118c5576118c561217a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806118f8576118f86122b3565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610806565b6000915050610806565b600081815260018301602052604081205461198457508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610806565b506000610806565b828054611998906121da565b90600052602060002090601f0160209004810192826119ba5760008555611a00565b82601f106119d357805160ff1916838001178555611a00565b82800160010185558215611a00579182015b82811115611a005782518255916020019190600101906119e5565b5061087c929150611ad8565b60405180604001604052806002906020820280368337509192915050565b8260028101928215611a005791602002820182811115611a005782518255916020019190600101906119e5565b828054828255906000526020600020906002028101928215611aa1579160200282015b82811115611aa1578251611a919083906002611a2a565b5091602001919060020190611a7a565b5061087c929150611aed565b8260028101928215611a00579182015b82811115611a00578254825591600101919060010190611abd565b5b8082111561087c5760008155600101611ad9565b8082111561087c5760008082556001820155600201611aed565b600081518084526020808501945080840160005b83811015611b405781516001600160a01b031687529582019590820190600101611b1b565b509495945050505050565b604081526000611b5e6040830185611b07565b82810360208481019190915284518083528582019282019060005b81811015611b9557845183529383019391830191600101611b79565b5090979650505050505050565b60208082528251828201819052600091906040908185019086840185805b83811015611bfd57825185835b6002811015611bea57825182529189019190890190600101611bcd565b5050509385019391860191600101611bc0565b509298975050505050505050565b600060208284031215611c1d57600080fd5b81356001600160e01b031981168114610e0c57600080fd5b602081526000610e0c6020830184611b07565b60005b83811015611c63578181015183820152602001611c4b565b838111156113f75750506000910152565b60008151808452611c8c816020860160208601611c48565b601f01601f19169290920160200192915050565b602081526000610e0c6020830184611c74565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611ceb57634e487b7160e01b600052602160045260246000fd5b91905290565b80356001600160a01b0381168114611d0857600080fd5b919050565b600060208284031215611d1f57600080fd5b610e0c82611cf1565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611d6757611d67611d28565b604052919050565b600082601f830112611d8057600080fd5b813567ffffffffffffffff811115611d9a57611d9a611d28565b611dad601f8201601f1916602001611d3e565b818152846020838601011115611dc257600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff821115611df957611df9611d28565b5060051b60200190565b600082601f830112611e1457600080fd5b81356020611e29611e2483611ddf565b611d3e565b82815260059290921b84018101918181019086841115611e4857600080fd5b8286015b84811015611e6a57611e5d81611cf1565b8352918301918301611e4c565b509695505050505050565b80358015158114611d0857600080fd5b600082601f830112611e9657600080fd5b6040516040810181811067ffffffffffffffff82111715611eb957611eb9611d28565b8060405250806040840185811115611ed057600080fd5b845b81811015611eea578035835260209283019201611ed2565b509195945050505050565b600082601f830112611f0657600080fd5b81356020611f16611e2483611ddf565b82815260069290921b84018101918181019086841115611f3557600080fd5b8286015b84811015611e6a57611f4b8882611e85565b835291830191604001611f39565b60008060008060008060008060006101208a8c031215611f7857600080fd5b893567ffffffffffffffff80821115611f9057600080fd5b611f9c8d838e01611d6f565b9a5060208c0135915080821115611fb257600080fd5b611fbe8d838e01611d6f565b9950611fcc60408d01611cf1565b9850611fda60608d01611cf1565b975060808c0135915080821115611ff057600080fd5b611ffc8d838e01611e03565b965061200a60a08d01611e75565b955060c08c013591508082111561202057600080fd5b61202c8d838e01611ef5565b945060e08c013591508082111561204257600080fd5b5061204f8c828d01611e03565b92505061205f6101008b01611cf1565b90509295985092959850929598565b60006020828403121561208057600080fd5b5035919050565b6000806040838503121561209a57600080fd5b823591506120aa60208401611cf1565b90509250929050565b600080604083850312156120c657600080fd5b50508035926020909101359150565b60408101818360005b60028110156120fd5781518352602092830192909101906001016120de565b50505092915050565b6040815260006121196040830185611c74565b828103602084015261212b8185611c74565b95945050505050565b60006040828403121561214657600080fd5b610e0c8383611e85565b6000806040838503121561216357600080fd5b61216c83611cf1565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156121a257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156121d3576121d36121a9565b5060010190565b600181811c908216806121ee57607f821691505b60208210811415610d7157634e487b7160e01b600052602260045260246000fd5b60008219821115612222576122226121a9565b500190565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161225f816017850160208801611c48565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612290816028840160208801611c48565b01602801949350505050565b6000828210156122ae576122ae6121a9565b500390565b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156122e3576122e36121a9565b500290565b6000816122f7576122f76121a9565b50600019019056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e59a1c48e5837ad7a7f3dcedcbe129bf3249ec4fbf651fd4f5e2600ead39fe2f5a26469706673582212200868bf2484bc6fabd6502ff88c8d3d0c036ff33cc3054f3e84387a3624d3b03e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToken(address)": {
        "details": "add a token to the list of allowed tokens",
        "params": {
          "_address": "tracker address of the token"
        },
        "returns": {
          "_0": "boolean indicating result of the operation"
        }
      },
      "close()": {
        "details": "close fund",
        "returns": {
          "_0": "boolean indicating result of the operation"
        }
      },
      "getAllowedTokens()": {
        "details": "list of allowed token contract addresses",
        "returns": {
          "_0": "return a list of allowed token contract addresses"
        }
      },
      "getBalanceForToken(address)": {
        "details": "get fund total balances",
        "returns": {
          "_0": "uint256 balance of the given token"
        }
      },
      "getBalances()": {
        "details": "get fund safe balances",
        "returns": {
          "_0": "tuple of (tokenAddress[], balance[])"
        }
      },
      "getDepositAddressFor(address)": {
        "details": "get deposit address for a token",
        "params": {
          "_tokenAddress": "tracker address of the token to deposit (must be an allowed token)"
        },
        "returns": {
          "_0": "deposit address for a token"
        }
      },
      "getDonatedTokens()": {
        "details": "get fund total balances",
        "returns": {
          "_0": "array of tokenAddress[]"
        }
      },
      "getMeta()": {
        "details": "get metadata for a fund",
        "returns": {
          "_0": "metadata of the fund"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isOpen()": {
        "details": "check if a fund is open for donations",
        "returns": {
          "_0": "boolean indicating status"
        }
      },
      "isTokenAllowed(address)": {
        "details": "add a token to the list of allowed tokens",
        "params": {
          "_address": "tracker address of the token"
        },
        "returns": {
          "_0": "boolean indicating if a token is allowed for deposit"
        }
      },
      "isWhitelisted(address)": {
        "details": "check if address is whitelisted",
        "returns": {
          "_0": "boolean indicating status"
        }
      },
      "pause()": {
        "details": "pause fund",
        "returns": {
          "_0": "boolean indicating result of the operation"
        }
      },
      "removeToken(address)": {
        "details": "remove a token from the list of allowed tokens",
        "params": {
          "_address": "tracker address of the token"
        },
        "returns": {
          "_0": "boolean indicating result of the operation"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "resume()": {
        "details": "resume fund",
        "returns": {
          "_0": "boolean indicating result of the operation"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateBalance(address,uint256)": {
        "details": "called from Donation.sol and updates total balance for the given token address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close()": {
        "notice": "this is final, a closed fund cannot be reopened"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4975,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)4970_storage)"
      },
      {
        "astId": 5278,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)9967_storage)"
      },
      {
        "astId": 13916,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)9967_storage"
      },
      {
        "astId": 11336,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "status",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(Status)11365"
      },
      {
        "astId": 11338,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "factory",
        "offset": 1,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11340,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "safeAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11342,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "requestable",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 11344,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 11346,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "focus",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 11349,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "donatedTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11353,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "balancesMap",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11358,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "checks",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_array(t_bytes32)2_storage)dyn_storage"
      },
      {
        "astId": 11361,
        "contract": "contracts/FundV1.sol:FundV1",
        "label": "whitelist",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)9967_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_array(t_bytes32)2_storage)dyn_storage": {
        "base": "t_array(t_bytes32)2_storage",
        "encoding": "dynamic_array",
        "label": "bytes32[2][]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)2_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Status)11365": {
        "encoding": "inplace",
        "label": "enum FundV1.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)9967_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)9967_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)4970_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)4970_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)9967_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9966,
            "contract": "contracts/FundV1.sol:FundV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)9666_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)4970_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 4967,
            "contract": "contracts/FundV1.sol:FundV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 4969,
            "contract": "contracts/FundV1.sol:FundV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)9666_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 9661,
            "contract": "contracts/FundV1.sol:FundV1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9665,
            "contract": "contracts/FundV1.sol:FundV1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}