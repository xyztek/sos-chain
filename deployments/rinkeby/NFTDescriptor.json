{
  "address": "0x9d0A86fFfff80A3F0072D08105189f4a7c81C62e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_supportAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_fundFocus",
          "type": "string"
        }
      ],
      "name": "_buildSVG",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_supportAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_fundFocus",
          "type": "string"
        }
      ],
      "name": "_constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_ownerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_supportAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_fundName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_fundFocus",
          "type": "string"
        }
      ],
      "name": "buildSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fundName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "fundFocus",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "supportAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "flipRatio",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "gnosisSafeAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "organization",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "cause",
              "type": "string"
            }
          ],
          "internalType": "struct NFTDescriptor.ConstructTokenURIParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "constructTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a7588230e544496abff26881c5383016870475b9103f2e5d765c2d9d8fc0e63",
  "receipt": {
    "to": null,
    "from": "0xEcdA812a67Ff9EB0257732D6a361008864275fCC",
    "contractAddress": "0x9d0A86fFfff80A3F0072D08105189f4a7c81C62e",
    "transactionIndex": 19,
    "gasUsed": "3912027",
    "logsBloom": "0x
    "blockHash": "0x70fd79fe9b6fce3542b333e235f7d41782f8088139918b75ce7a75ebc02fd49e",
    "transactionHash": "0x7a7588230e544496abff26881c5383016870475b9103f2e5d765c2d9d8fc0e63",
    "logs": [],
    "blockNumber": 10320401,
    "cumulativeGasUsed": "7806848",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e741a5d54aa5c6f7c82afbe995ed909",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supportAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fundFocus\",\"type\":\"string\"}],\"name\":\"_buildSVG\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supportAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fundFocus\",\"type\":\"string\"}],\"name\":\"_constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_supportAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_fundFocus\",\"type\":\"string\"}],\"name\":\"buildSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fundName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fundFocus\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supportAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flipRatio\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"gnosisSafeAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"organization\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cause\",\"type\":\"string\"}],\"internalType\":\"struct NFTDescriptor.ConstructTokenURIParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"constructTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTDescriptor.sol\":\"NFTDescriptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5efa2a2ed44af15fd5bec8c43b45cb26fe6cb68671fea151e6afcfed66ed2672\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./libraries/SVG.sol\\\";\\nimport \\\"./libraries/HexStrings.sol\\\";\\n\\nimport \\\"./SVGConstants.sol\\\";\\nimport \\\"./SVGComponents.sol\\\";\\n\\ncontract NFTDescriptor is SVGConstants, SVGComponents {\\n    using Strings for uint256;\\n    using SafeMath for uint256;\\n    using SafeMath for uint160;\\n    using SafeMath for uint8;\\n    using SignedSafeMath for int256;\\n    using HexStrings for uint256;\\n\\n    //uint256 constant sqrt10X128 = 1076067327063303206878105757264492625226;\\n\\n    struct ConstructTokenURIParams {\\n        uint256 tokenId;\\n        address tokenAddress;\\n        string tokenSymbol;\\n        string fundName;\\n        string fundFocus;\\n        uint256 supportAmount;\\n        bool flipRatio;\\n        address gnosisSafeAddress;\\n        string organization;\\n        string cause;\\n    }\\n\\n    function _constructTokenURI(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint256 _supportAmount,\\n        address _tokenAddress,\\n        string memory _fundName,\\n        string memory _fundFocus\\n    ) public pure returns (string memory) {\\n        return\\n            Base64.encode(\\n                _buildSVG(\\n                    _tokenId,\\n                    _ownerAddress,\\n                    _supportAmount,\\n                    _tokenAddress,\\n                    _fundName,\\n                    _fundFocus\\n                )\\n            );\\n    }\\n\\n    function buildSVG(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint256 _supportAmount,\\n        address _tokenAddress,\\n        string memory _fundName,\\n        string memory _fundFocus\\n    ) public pure returns (string memory) {\\n        return\\n            string(\\n                _buildSVG(\\n                    _tokenId,\\n                    _ownerAddress,\\n                    _supportAmount,\\n                    _tokenAddress,\\n                    _fundName,\\n                    _fundFocus\\n                )\\n            );\\n    }\\n\\n    function _buildSVG(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint256 _supportAmount,\\n        address _tokenAddress,\\n        string memory _fundName,\\n        string memory _fundFocus\\n    ) public pure returns (bytes memory) {\\n        string memory tokenColorA = tokenToColorHex(_ownerAddress, 0);\\n        string memory tokenColorB = tokenToColorHex(_ownerAddress, 136);\\n\\n        bytes memory supportAsBytes = abi.encodePacked(\\n            (_supportAmount / 1e18).toString()\\n        );\\n\\n        bytes memory staticLayer = abi.encodePacked(\\n            styleConstant,\\n            background(),\\n            logoConstant\\n        );\\n\\n        bytes memory dynamicLayer = abi.encodePacked(\\n            sideText(\\n                abi.encodePacked(_tokenId.toString()),\\n                abi.encodePacked(\\\"rotate(90 132.5 142.5)\\\"),\\n                abi.encodePacked(\\\"text-anchor:start\\\")\\n            ),\\n            sideText(\\n                addressToBytes(_ownerAddress),\\n                abi.encodePacked(\\\"rotate(90 -107.5 382.5)\\\"),\\n                abi.encodePacked(\\\"text-anchor:end\\\")\\n            ),\\n            titleStack(20, 100, \\\"Fund\\\", abi.encodePacked(_fundName)),\\n            titleStack(20, 150, \\\"Focus\\\", abi.encodePacked(_fundFocus)),\\n            titleStack(20, 200, \\\"Support\\\", supportAsBytes),\\n            SVG.tag(\\n                abi.encodePacked(\\\"rect\\\"),\\n                abi.encodePacked(\\n                    'x=\\\"235\\\" y=\\\"480\\\" width=\\\"10\\\" height=\\\"10\\\" ',\\n                    SVG.keyValue(\\\"fill\\\", abi.encodePacked(\\\"#\\\", tokenColorA))\\n                ),\\n                abi.encodePacked(\\\"\\\")\\n            ),\\n            SVG.tag(\\n                abi.encodePacked(\\\"rect\\\"),\\n                abi.encodePacked(\\n                    'x=\\\"250\\\" y=\\\"480\\\" width=\\\"10\\\" height=\\\"10\\\" ',\\n                    SVG.keyValue(\\\"fill\\\", abi.encodePacked(\\\"#\\\", tokenColorB))\\n                ),\\n                abi.encodePacked(\\\"\\\")\\n            )\\n        );\\n\\n        return\\n            abi.encodePacked(\\n                '<svg width=\\\"290\\\" height=\\\"500\\\" viewBox=\\\"0 0 290 500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                staticLayer,\\n                dynamicLayer,\\n                \\\"</svg>\\\"\\n            );\\n    }\\n\\n    function constructTokenURI(ConstructTokenURIParams memory params)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        string memory name = generateName(params);\\n        string memory _nftDescription = nftDescription(\\n            escapeQuotes(params.tokenSymbol),\\n            addressToString(params.gnosisSafeAddress)\\n        );\\n        string memory _nftDetails = nftDetails(\\n            params.tokenId.toString(),\\n            escapeQuotes(params.tokenSymbol),\\n            addressToString(params.tokenAddress)\\n        );\\n        //string memory image = Base64.encode(bytes(generateSVGImage(params)));\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            name,\\n                            '\\\", \\\"description\\\":\\\"',\\n                            _nftDescription,\\n                            _nftDetails,\\n                            '\\\", \\\"image\\\": \\\"',\\n                            \\\"data:image/svg+xml;base64,\\\",\\n                            // image,\\n                            '\\\"}'\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function escapeQuotes(string memory symbol)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint8 quotesCount = 0;\\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes = new bytes(\\n                symbolBytes.length + (quotesCount)\\n            );\\n            uint256 index;\\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = \\\"\\\\\\\\\\\";\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function nftDescription(\\n        string memory tokenSymbol,\\n        string memory gnosisSafeAddress\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"This NFT represents a donation to a SOS chain \\\",\\n                    tokenSymbol,\\n                    \\\"The owner of this NFT has voting rights for an SOS chain.\\\\\\\\n\\\",\\n                    \\\"\\\\\\\\Safe Address: \\\",\\n                    gnosisSafeAddress\\n                )\\n            );\\n    }\\n\\n    function nftDetails(\\n        string memory tokenId,\\n        string memory tokenSymbol,\\n        string memory tokenAddress\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\" Address: \\\",\\n                    tokenAddress,\\n                    \\\"\\\\\\\\nSymbol: \\\",\\n                    tokenSymbol,\\n                    \\\"\\\\\\\\nToken ID: \\\",\\n                    tokenId,\\n                    \\\"\\\\\\\\n\\\"\\n                )\\n            );\\n    }\\n\\n    function generateName(ConstructTokenURIParams memory params)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\\"SOS - \\\", escapeQuotes(params.tokenSymbol))\\n            );\\n    }\\n\\n    struct DecimalStringParams {\\n        // significant figures of decimal\\n        uint256 sigfigs;\\n        // length of decimal string\\n        uint8 bufferLength;\\n        // ending index for significant figures (funtion works backwards when copying sigfigs)\\n        uint8 sigfigIndex;\\n        // index of decimal place (0 if no decimal)\\n        uint8 decimalIndex;\\n        // start index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosStartIndex;\\n        // end index for trailing/leading 0's for very small/large numbers\\n        uint8 zerosEndIndex;\\n        // true if decimal number is less than one\\n        bool isLessThanOne;\\n        // true if string should include \\\"%\\\"\\n        bool isPercent;\\n    }\\n\\n    function generateDecimalString(DecimalStringParams memory params)\\n        private\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(params.bufferLength);\\n        if (params.isPercent) {\\n            buffer[buffer.length - 1] = \\\"%\\\";\\n        }\\n        if (params.isLessThanOne) {\\n            buffer[0] = \\\"0\\\";\\n            buffer[1] = \\\".\\\";\\n        }\\n\\n        // add leading/trailing 0's\\n        for (\\n            uint256 zerosCursor = params.zerosStartIndex;\\n            zerosCursor < params.zerosEndIndex.add(1);\\n            zerosCursor++\\n        ) {\\n            buffer[zerosCursor] = bytes1(uint8(48));\\n        }\\n        // add sigfigs\\n        while (params.sigfigs > 0) {\\n            if (\\n                params.decimalIndex > 0 &&\\n                params.sigfigIndex == params.decimalIndex\\n            ) {\\n                buffer[params.sigfigIndex--] = \\\".\\\";\\n            }\\n            buffer[params.sigfigIndex--] = bytes1(\\n                uint8(uint256(48).add(params.sigfigs % 10))\\n            );\\n            params.sigfigs /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    function sigfigsRounded(uint256 value, uint8 digits)\\n        private\\n        pure\\n        returns (uint256, bool)\\n    {\\n        bool extraDigit;\\n        if (digits > 5) {\\n            value = value.div((10**(digits - 5)));\\n        }\\n        bool roundUp = value % 10 > 4;\\n        value = value.div(10);\\n        if (roundUp) {\\n            value = value + 1;\\n        }\\n        // 99999 -> 100000 gives an extra sigfig\\n        if (value == 100000) {\\n            value /= 10;\\n            extraDigit = true;\\n        }\\n        return (value, extraDigit);\\n    }\\n\\n    function abs(int256 x) private pure returns (uint256) {\\n        return uint256(x >= 0 ? x : -x);\\n    }\\n\\n    function addressToString(address _address)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return (uint256(uint160(_address))).toHexStringASCII(20);\\n    }\\n\\n    function addressToBytes(address _address)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(addressToString(_address));\\n    }\\n\\n    function scale(\\n        uint256 n,\\n        uint256 inMn,\\n        uint256 inMx,\\n        uint256 outMn,\\n        uint256 outMx\\n    ) private pure returns (string memory) {\\n        return\\n            (n.sub(inMn).mul(outMx.sub(outMn)).div(inMx.sub(inMn)).add(outMn))\\n                .toString();\\n    }\\n\\n    function tokenToColorHex(address token, uint256 offset)\\n        internal\\n        pure\\n        returns (string memory str)\\n    {\\n        return\\n            string(\\n                (uint256(uint160(token)) >> offset).toHexStringASCIINoPrefix(3)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xcbc778364df897bb8782dd89554c2d95fec9a500aa063c3bd589f85c86be22fe\",\"license\":\"MIT\"},\"contracts/SVGComponents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./libraries/SVG.sol\\\";\\n\\ncontract SVGComponents {\\n    using Strings for uint256;\\n\\n    function background() internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                SVG.tag(\\n                    abi.encodePacked(\\\"path\\\"),\\n                    abi.encodePacked('fill=\\\"#22225E\\\" d=\\\"M0 0h290v500H0z\\\"'),\\n                    abi.encodePacked(\\\"\\\")\\n                ),\\n                SVG.tag(\\n                    abi.encodePacked(\\\"path\\\"),\\n                    abi.encodePacked('fill=\\\"#FFF\\\" d=\\\"M270 1h19v498h-19z\\\"'),\\n                    abi.encodePacked(\\\"\\\")\\n                )\\n            );\\n    }\\n\\n    function sideText(\\n        bytes memory _text,\\n        bytes memory _transform,\\n        bytes memory _style\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                SVG.tag(\\n                    abi.encodePacked(\\\"text\\\"),\\n                    abi.encodePacked(\\n                        SVG.keyValue(\\n                            abi.encodePacked(\\\"class\\\"),\\n                            abi.encodePacked(\\\"small\\\")\\n                        ),\\n                        \\\" \\\",\\n                        SVG.keyValue(abi.encodePacked(\\\"transform\\\"), _transform),\\n                        \\\" \\\",\\n                        SVG.keyValue(abi.encodePacked(\\\"style\\\"), _style)\\n                    ),\\n                    _text\\n                )\\n            );\\n    }\\n\\n    function titleStack(\\n        uint256 _x,\\n        uint256 _y,\\n        bytes memory _sub,\\n        bytes memory _title\\n    ) internal pure returns (bytes memory) {\\n        return\\n            SVG.tag(\\n                abi.encodePacked(\\\"text\\\"),\\n                abi.encodePacked(\\n                    'class=\\\"title\\\" transform=',\\n                    '\\\"translate(',\\n                    _x.toString(),\\n                    \\\",\\\",\\n                    _y.toString(),\\n                    ')\\\"'\\n                ),\\n                abi.encodePacked(\\n                    SVG.tag(\\n                        abi.encodePacked(\\\"tspan\\\"),\\n                        abi.encodePacked('class=\\\"small alpha\\\" x=\\\"0\\\"'),\\n                        _sub\\n                    ),\\n                    SVG.tag(\\n                        abi.encodePacked(\\\"tspan\\\"),\\n                        abi.encodePacked('class=\\\"large\\\" x=\\\"0\\\" dy=\\\"20\\\"'),\\n                        _title\\n                    )\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x5ac1405ef6272b2d7ad00a5955f58fb8c35dbd2d9cfbd7fe5326489148800836\",\"license\":\"MIT\"},\"contracts/SVGConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract SVGConstants {\\n    bytes constant styleConstant =\\n        \\\"<style><![CDATA[text{font-family:Helvetica;font-weight:100}.alpha{opacity:0.5}.small{font-size:.8rem}.large{font-size:1.2rem}.title{fill:#fff}]]></style>\\\";\\n\\n    bytes constant logoConstant =\\n        '<g transform=\\\"translate(16 16)\\\"><path d=\\\"m52.7 27.5 3.6-2.1c.8 2.2 2.4 3.3 4.9 3.3 2.4 0 3.4-.9 3.4-2.3 0-.7-.4-1.4-1-1.7-.7-.4-1.9-.9-3.6-1.4-1.9-.6-3.1-1-4.4-2-1.3-.9-2-2.4-2-4.4s.7-3.5 2-4.6c1.4-1.1 3.2-1.8 5-1.7 3.4 0 6.1 1.8 7.6 4.8l-3.5 2c-.9-1.8-2.2-2.7-4.1-2.7-1.7 0-2.8.9-2.8 2.1 0 .7.3 1.3.8 1.6.6.4 1.6.9 3.2 1.3l1.5.5c.5.2.9.3 1.4.5s.9.4 1.3.7c.7.4 1.6 1.1 2 1.9.5.9.8 2 .8 3 0 2-.7 3.5-2.2 4.7-1.4 1.1-3.3 1.7-5.6 1.7-4.2 0-7.1-2-8.3-5.2zm28 5.2c-6 .1-11-4.7-11.1-10.8v-.3c-.1-2.9 1.1-5.8 3.2-7.8 4.3-4.3 11.3-4.3 15.7 0 2.1 2 3.3 4.9 3.2 7.8.1 6-4.8 11-10.8 11.1-.1.1-.1.1-.2 0zm0-4.1c1.8.1 3.6-.7 4.9-2s2-3.1 2-5c.1-1.9-.7-3.7-2-5-2.7-2.6-7.1-2.6-9.8 0-1.3 1.3-2 3.1-2 5-.1 1.9.7 3.7 2 5 1.3 1.4 3 2.1 4.9 2zm11.4-1.1 3.6-2.1c.8 2.2 2.5 3.3 4.9 3.3s3.4-.9 3.4-2.3c0-.7-.4-1.4-1-1.7-.7-.4-1.9-.9-3.6-1.4-1.9-.6-3.1-1-4.4-2-1.3-.9-2-2.4-2-4.4s.7-3.5 2-4.6c1.4-1.1 3.2-1.8 5-1.7 3.4 0 6.1 1.8 7.6 4.8l-3.5 2c-.9-1.8-2.2-2.7-4.1-2.7-1.7 0-2.8.9-2.8 2.1 0 .7.3 1.3.8 1.6.6.4 1.6.9 3.2 1.3l1.5.5c.5.2.9.3 1.4.5s.9.4 1.3.7c.7.4 1.6 1.1 2 1.9.5.9.8 2 .8 3 0 2-.7 3.5-2.2 4.7s-3.3 1.7-5.6 1.7c-4.2 0-7.1-2-8.3-5.2zm27.5 2c-2.1-2.1-3.2-4.9-3.1-7.8 0-3.1 1-5.7 3.1-7.8s4.7-3.2 7.9-3.2c1.9 0 3.7.5 5.4 1.4 1.6.9 2.9 2.2 3.8 3.7l-1.4.8c-.7-1.3-1.8-2.4-3.1-3.2-1.4-.8-3-1.2-4.6-1.2-2.8 0-5 .9-6.8 2.7s-2.7 4.2-2.6 6.7c-.1 2.5.9 4.9 2.6 6.7 1.8 1.8 4.1 2.7 6.8 2.7 3.3 0 6.3-1.8 7.7-4.5l1.4.8c-1.7 3.2-5.3 5.2-9.2 5.2-3.2.2-5.8-.9-7.9-3zM153.7 11h1.6v21.3h-1.6V22.1h-12.4v10.2h-1.6V11h1.6v9.6h12.4V11zm20.5 21.3-2.1-5.4h-10.7l-2.1 5.4h-1.7l8.3-21.3h1.7l8.2 21.3h-1.6zm-12.1-6.9h9.5L166.8 13l-4.7 12.4zM178.3 11h1.6v21.3h-1.6V11zm20.1 0h1.6v21.3h-1.4L186 14v18.3h-1.6V11h1.4l12.6 18.3V11z\\\" style=\\\"fill:#fff\\\"/><linearGradient id=\\\"SVGID_1_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"57.913\\\" y1=\\\"179.272\\\" x2=\\\"98.655\\\" y2=\\\"220.024\\\" gradientTransform=\\\"translate(0 -55.76) scale(.3097)\\\"><stop offset=\\\"0\\\" style=\\\"stop-color:#365fc8\\\"/><stop offset=\\\".05\\\" style=\\\"stop-color:#3368ca\\\"/><stop offset=\\\".37\\\" style=\\\"stop-color:#229ed4\\\"/><stop offset=\\\".65\\\" style=\\\"stop-color:#15c6dc\\\"/><stop offset=\\\".87\\\" style=\\\"stop-color:#0ddee0\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color:#0ae7e2\\\"/></linearGradient><path d=\\\"m14 3.7 6.2 6.2c.9-.9 2.4-.9 3.3 0s.9 2.4 0 3.3c2.5-2.4 5.9-3.6 9.4-3.2C32.1 4 26.4-.3 20.4.5 18 .8 15.7 1.9 14 3.7z\\\" style=\\\"fill:url(#SVGID_1_)\\\"/><linearGradient id=\\\"SVGID_2_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"79.736\\\" y1=\\\"320.73\\\" x2=\\\"38.985\\\" y2=\\\"279.979\\\" gradientTransform=\\\"translate(0 -55.76) scale(.3097)\\\"><stop offset=\\\"0\\\" style=\\\"stop-color:#365fc8\\\"/><stop offset=\\\".05\\\" style=\\\"stop-color:#3368ca\\\"/><stop offset=\\\".37\\\" style=\\\"stop-color:#229ed4\\\"/><stop offset=\\\".65\\\" style=\\\"stop-color:#15c6dc\\\"/><stop offset=\\\".87\\\" style=\\\"stop-color:#0ddee0\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color:#0ae7e2\\\"/></linearGradient><path d=\\\"M19.1 33.4c-.9-.9-.9-2.5 0-3.4-2.4 2.4-5.9 3.7-9.4 3.3.8 6.1 6.4 10.3 12.5 9.5 2.4-.3 4.6-1.4 6.3-3.2l-6.2-6.2c-.9.9-2.3.9-3.2 0z\\\" style=\\\"fill:url(#SVGID_2_)\\\"/><linearGradient id=\\\"SVGID_3_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"27.841\\\" y1=\\\"209.181\\\" x2=\\\"109.391\\\" y2=\\\"290.731\\\" gradientTransform=\\\"translate(0 -55.76) scale(.3097)\\\"><stop offset=\\\"0\\\" style=\\\"stop-color:#de016a\\\"/><stop offset=\\\".18\\\" style=\\\"stop-color:#d8016a\\\"/><stop offset=\\\".41\\\" style=\\\"stop-color:#c8026a\\\"/><stop offset=\\\".66\\\" style=\\\"stop-color:#ad0469\\\"/><stop offset=\\\".94\\\" style=\\\"stop-color:#870668\\\"/><stop offset=\\\"1\\\" style=\\\"stop-color:#7f0768\\\"/></linearGradient><path d=\\\"M39.2 13.2c-1.7-1.7-3.9-2.8-6.3-3.2-3.4-.5-6.9.7-9.4 3.2L12.8 23.9c-.9.9-2.4.8-3.3-.1-.8-.9-.8-2.3 0-3.2L20.2 9.9 14 3.7 3.3 14.4C-1 18.7-1 25.8 3.3 30.1c1.7 1.7 4 2.8 6.3 3.2 3.4.5 6.9-.7 9.4-3.2l10.7-10.7.2-.2c1-.8 2.5-.6 3.3.4.7.9.7 2.2-.2 3.1L22.3 33.4l6.2 6.2 10.7-10.7c4.4-4.3 4.4-11.3 0-15.7z\\\" style=\\\"fill:url(#SVGID_3_)\\\"/></g>';\\n}\\n\",\"keccak256\":\"0xead88083aedd95951801da0906b1935a47f95b3eef195fe0f6c41d0245f35cb4\",\"license\":\"MIT\"},\"contracts/libraries/HexStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary HexStrings {\\n    bytes16 internal constant ALPHABET = \\\"0123456789abcdef\\\";\\n\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\n    function toHexStringASCII(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function toHexStringASCIINoPrefix(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length);\\n        for (uint256 i = buffer.length; i > 0; i--) {\\n            buffer[i - 1] = ALPHABET[value & 0xf];\\n            value >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x75bf22f50dc698b1fdb974ca04c3056c7bd34572f8528a27b063c34ece8ce4d5\",\"license\":\"MIT\"},\"contracts/libraries/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary SVG {\\n    using Strings for uint256;\\n\\n    function tag(\\n        bytes memory _name,\\n        bytes memory _attributes,\\n        bytes memory _contents\\n    ) public pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                \\\"<\\\",\\n                _name,\\n                \\\" \\\",\\n                _attributes,\\n                \\\">\\\",\\n                _contents,\\n                \\\"</\\\",\\n                _name,\\n                \\\">\\\"\\n            );\\n    }\\n\\n    function toRGBA(\\n        string memory r,\\n        string memory b,\\n        string memory g,\\n        string memory a\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\\"rgba(\\\", r, \\\",\\\", b, \\\",\\\", g, \\\",\\\", a, \\\")\\\");\\n    }\\n\\n    function keyValue(bytes memory _key, bytes memory _value)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodePacked(_key, \\\"=\\\", '\\\"', _value, '\\\"');\\n    }\\n\\n    function toPixelValue(uint256 value) public pure returns (bytes memory) {\\n        return abi.encodePacked(value.toString(), \\\"px\\\");\\n    }\\n\\n    function rPad(bytes memory str) public pure returns (bytes memory) {\\n        return abi.encodePacked(str, \\\" \\\");\\n    }\\n}\\n\",\"keccak256\":\"0x270140c8eaa9cf0860cb6c755441bebee28de7b841afe6db09ff5ff3a91becc3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061460f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063011b66511461005157806341b3394c14610081578063b29e697c146100b1578063be4eeda7146100e1575b600080fd5b61006b60048036038101906100669190611ac3565b610111565b6040516100789190611c10565b60405180910390f35b61009b60048036038101906100969190611df6565b6106d8565b6040516100a89190611e94565b60405180910390f35b6100cb60048036038101906100c69190611ac3565b610795565b6040516100d89190611e94565b60405180910390f35b6100fb60048036038101906100f69190611ac3565b6107b9565b6040516101089190611e94565b60405180910390f35b606060006101208760006107d5565b9050600061012f8860886107d5565b9050600061014f670de0b6b3a76400008961014a9190611f14565b61080c565b60405160200161015f9190611f81565b604051602081830303815290604052905060006040518060c00160405280609981526020016136586099913961019361096d565b60405180610ee00160405280610ea981526020016136f1610ea991396040516020016101c193929190611fd4565b604051602081830303815290604052905060006102406101e08d61080c565b6040516020016101f09190611f81565b60405160208183030381529060405260405160200161020e90612051565b60405160208183030381529060405260405160200161022c906120b2565b604051602081830303815290604052610b44565b61028d61024c8d610e1d565b60405160200161025b90612113565b60405160208183030381529060405260405160200161027990612174565b604051602081830303815290604052610b44565b6102ef601460646040518060400160405280600481526020017f46756e64000000000000000000000000000000000000000000000000000000008152508d6040516020016102db9190611f81565b604051602081830303815290604052610e4e565b610351601460966040518060400160405280600581526020017f466f6375730000000000000000000000000000000000000000000000000000008152508d60405160200161033d9190611f81565b604051602081830303815290604052610e4e565b610394601460c86040518060400160405280600781526020017f537570706f7274000000000000000000000000000000000000000000000000008152508a610e4e565b73234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd6040516020016103bd906121d5565b60405160208183030381529060405273234A11FE18aed6a86F4B96610c8CB686c4CF28556315824f828e6040516020016103f79190612236565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161042291906122ee565b600060405180830381865af415801561043f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061046891906123c4565b604051602001610478919061247f565b604051602081830303815290604052604051602001610496906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016104c3939291906124dc565b600060405180830381865af41580156104e0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061050991906123c4565b73234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd604051602001610532906121d5565b60405160208183030381529060405273234A11FE18aed6a86F4B96610c8CB686c4CF28556315824f828e60405160200161056c9190612236565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161059791906122ee565b600060405180830381865af41580156105b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105dd91906123c4565b6040516020016105ed919061259a565b60405160208183030381529060405260405160200161060b906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610638939291906124dc565b600060405180830381865af4158015610655573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061067e91906123c4565b60405160200161069497969594939291906125bc565b604051602081830303815290604052905081816040516020016106b8929190612705565b604051602081830303815290604052955050505050509695505050505050565b606060006106e5836110be565b9050600061070b6106f985604001516110f3565b6107068660e0015161138b565b6113be565b9050600061073e61071f866000015161080c565b61072c87604001516110f3565b610739886020015161138b565b6113ea565b905061076c838383604051602001610758939291906128bb565b604051602081830303815290604052611419565b60405160200161077c919061296f565b6040516020818303038152906040529350505050919050565b60606107ad6107a8888888888888610111565b611419565b90509695505050505050565b60606107c9878787878787610111565b90509695505050505050565b60606108046003838573ffffffffffffffffffffffffffffffffffffffff16901c61157d90919063ffffffff16565b905092915050565b60606000821415610854576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610968565b600082905060005b6000821461088657808061086f90612991565b915050600a8261087f9190611f14565b915061085c565b60008167ffffffffffffffff8111156108a2576108a1611998565b5b6040519080825280601f01601f1916602001820160405280156108d45781602001600182028036833780820191505090505b5090505b60008514610961576001826108ed91906129da565b9150600a856108fc9190612a0e565b60306109089190612a3f565b60f81b81838151811061091e5761091d612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561095a9190611f14565b94506108d8565b8093505050505b919050565b606073234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd60405160200161099890612b10565b6040516020818303038152906040526040516020016109b690612b97565b6040516020818303038152906040526040516020016109d4906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610a01939291906124dc565b600060405180830381865af4158015610a1e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a4791906123c4565b73234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd604051602001610a7090612b10565b604051602081830303815290604052604051602001610a8e90612c1e565b604051602081830303815290604052604051602001610aac906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610ad9939291906124dc565b600060405180830381865af4158015610af6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1f91906123c4565b604051602001610b30929190612c33565b604051602081830303815290604052905090565b606073234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd604051602001610b6f90612ca3565b60405160208183030381529060405273234A11FE18aed6a86F4B96610c8CB686c4CF28556315824f82604051602001610ba790612d04565b604051602081830303815290604052604051602001610bc590612d65565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610bf1929190612d7a565b600060405180830381865af4158015610c0e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c3791906123c4565b73234A11FE18aed6a86F4B96610c8CB686c4CF28556315824f82604051602001610c6090612dfd565b604051602081830303815290604052896040518363ffffffff1660e01b8152600401610c8d929190612d7a565b600060405180830381865af4158015610caa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cd391906123c4565b73234A11FE18aed6a86F4B96610c8CB686c4CF28556315824f82604051602001610cfc90612e5e565b604051602081830303815290604052896040518363ffffffff1660e01b8152600401610d29929190612d7a565b600060405180830381865af4158015610d46573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d6f91906123c4565b604051602001610d8193929190612ebf565b604051602081830303815290604052876040518463ffffffff1660e01b8152600401610daf939291906124dc565b600060405180830381865af4158015610dcc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610df591906123c4565b604051602001610e059190612f06565b60405160208183030381529060405290509392505050565b6060610e288261138b565b604051602001610e389190611f81565b6040516020818303038152906040529050919050565b606073234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd604051602001610e7990612ca3565b604051602081830303815290604052610e918861080c565b610e9a8861080c565b604051602001610eab92919061304d565b60405160208183030381529060405273234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd604051602001610ee3906130e9565b604051602081830303815290604052604051602001610f019061314a565b6040516020818303038152906040528a6040518463ffffffff1660e01b8152600401610f2f939291906124dc565b600060405180830381865af4158015610f4c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f7591906123c4565b73234A11FE18aed6a86F4B96610c8CB686c4CF2855639887edcd604051602001610f9e906130e9565b604051602081830303815290604052604051602001610fbc906131ab565b6040516020818303038152906040528a6040518463ffffffff1660e01b8152600401610fea939291906124dc565b600060405180830381865af4158015611007573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061103091906123c4565b604051602001611041929190612c33565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161106e939291906124dc565b600060405180830381865af415801561108b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110b491906123c4565b9050949350505050565b60606110cd82604001516110f3565b6040516020016110dd919061320c565b6040516020818303038152906040529050919050565b606060008290506000805b82518160ff161015611196577f2200000000000000000000000000000000000000000000000000000000000000838260ff168151811061114157611140612a95565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141561118357818061117f9061323b565b9250505b808061118e9061323b565b9150506110fe565b5060008160ff1611156113805760008160ff1683516111b59190612a3f565b67ffffffffffffffff8111156111ce576111cd611998565b5b6040519080825280601f01601f1916602001820160405280156112005781602001600182028036833780820191505090505b509050600080600090505b84518160ff161015611373577f2200000000000000000000000000000000000000000000000000000000000000858260ff168151811061124e5761124d612a95565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156112f1577f5c000000000000000000000000000000000000000000000000000000000000008383806112ae90612991565b9450815181106112c1576112c0612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053505b848160ff168151811061130757611306612a95565b5b602001015160f81c60f81b83838061131e90612991565b94508151811061133157611330612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061136b9061323b565b91505061120b565b5081945050505050611386565b83925050505b919050565b60606113b760148373ffffffffffffffffffffffffffffffffffffffff1661169990919063ffffffff16565b9050919050565b606082826040516020016113d3929190613395565b604051602081830303815290604052905092915050565b60608183856040516020016114019392919061350a565b60405160208183030381529060405290509392505050565b606060008251141561143c57604051806020016040528060008152509050611578565b600060405180606001604052806040815260200161459a604091399050600060036002855161146b9190612a3f565b6114759190611f14565b60046114819190613567565b67ffffffffffffffff81111561149a57611499611998565b5b6040519080825280601f01601f1916602001820160405280156114cc5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611538576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506114dd565b505060038651066001811461155457600281146115675761156f565b603d6001830353603d600283035361156f565b603d60018303535b50505080925050505b919050565b6060600082600261158e9190613567565b67ffffffffffffffff8111156115a7576115a6611998565b5b6040519080825280601f01601f1916602001820160405280156115d95781602001600182028036833780820191505090505b5090506000815190505b600081111561168e577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061162257611621612a95565b5b1a60f81b8260018361163491906129da565b8151811061164557611644612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508080611686906135c1565b9150506115e3565b508091505092915050565b6060600060028360026116ac9190613567565b6116b69190612a3f565b67ffffffffffffffff8111156116cf576116ce611998565b5b6040519080825280601f01601f1916602001820160405280156117015781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061173957611738612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061179d5761179c612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026117dd9190613567565b6117e79190612a3f565b90505b6001811115611887577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061182957611828612a95565b5b1a60f81b8282815181106118405761183f612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080611880906135c1565b90506117ea565b50600084146118cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c290613637565b60405180910390fd5b8091505092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6118fc816118e9565b811461190757600080fd5b50565b600081359050611919816118f3565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061194a8261191f565b9050919050565b61195a8161193f565b811461196557600080fd5b50565b60008135905061197781611951565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119d082611987565b810181811067ffffffffffffffff821117156119ef576119ee611998565b5b80604052505050565b6000611a026118d5565b9050611a0e82826119c7565b919050565b600067ffffffffffffffff821115611a2e57611a2d611998565b5b611a3782611987565b9050602081019050919050565b82818337600083830152505050565b6000611a66611a6184611a13565b6119f8565b905082815260208101848484011115611a8257611a81611982565b5b611a8d848285611a44565b509392505050565b600082601f830112611aaa57611aa961197d565b5b8135611aba848260208601611a53565b91505092915050565b60008060008060008060c08789031215611ae057611adf6118df565b5b6000611aee89828a0161190a565b9650506020611aff89828a01611968565b9550506040611b1089828a0161190a565b9450506060611b2189828a01611968565b935050608087013567ffffffffffffffff811115611b4257611b416118e4565b5b611b4e89828a01611a95565b92505060a087013567ffffffffffffffff811115611b6f57611b6e6118e4565b5b611b7b89828a01611a95565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b83811015611bc2578082015181840152602081019050611ba7565b83811115611bd1576000848401525b50505050565b6000611be282611b88565b611bec8185611b93565b9350611bfc818560208601611ba4565b611c0581611987565b840191505092915050565b60006020820190508181036000830152611c2a8184611bd7565b905092915050565b600080fd5b600080fd5b60008115159050919050565b611c5181611c3c565b8114611c5c57600080fd5b50565b600081359050611c6e81611c48565b92915050565b60006101408284031215611c8b57611c8a611c32565b5b611c966101406119f8565b90506000611ca68482850161190a565b6000830152506020611cba84828501611968565b602083015250604082013567ffffffffffffffff811115611cde57611cdd611c37565b5b611cea84828501611a95565b604083015250606082013567ffffffffffffffff811115611d0e57611d0d611c37565b5b611d1a84828501611a95565b606083015250608082013567ffffffffffffffff811115611d3e57611d3d611c37565b5b611d4a84828501611a95565b60808301525060a0611d5e8482850161190a565b60a08301525060c0611d7284828501611c5f565b60c08301525060e0611d8684828501611968565b60e08301525061010082013567ffffffffffffffff811115611dab57611daa611c37565b5b611db784828501611a95565b6101008301525061012082013567ffffffffffffffff811115611ddd57611ddc611c37565b5b611de984828501611a95565b6101208301525092915050565b600060208284031215611e0c57611e0b6118df565b5b600082013567ffffffffffffffff811115611e2a57611e296118e4565b5b611e3684828501611c74565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000611e6682611e3f565b611e708185611e4a565b9350611e80818560208601611ba4565b611e8981611987565b840191505092915050565b60006020820190508181036000830152611eae8184611e5b565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f1f826118e9565b9150611f2a836118e9565b925082611f3a57611f39611eb6565b5b828204905092915050565b600081905092915050565b6000611f5b82611e3f565b611f658185611f45565b9350611f75818560208601611ba4565b80840191505092915050565b6000611f8d8284611f50565b915081905092915050565b600081905092915050565b6000611fae82611b88565b611fb88185611f98565b9350611fc8818560208601611ba4565b80840191505092915050565b6000611fe08286611fa3565b9150611fec8285611fa3565b9150611ff88284611fa3565b9150819050949350505050565b7f726f74617465283930203133322e35203134322e352900000000000000000000600082015250565b600061203b601683611f45565b915061204682612005565b601682019050919050565b600061205c8261202e565b9150819050919050565b7f746578742d616e63686f723a7374617274000000000000000000000000000000600082015250565b600061209c601183611f45565b91506120a782612066565b601182019050919050565b60006120bd8261208f565b9150819050919050565b7f726f74617465283930202d3130372e35203338322e3529000000000000000000600082015250565b60006120fd601783611f45565b9150612108826120c7565b601782019050919050565b600061211e826120f0565b9150819050919050565b7f746578742d616e63686f723a656e640000000000000000000000000000000000600082015250565b600061215e600f83611f45565b915061216982612128565b600f82019050919050565b600061217f82612151565b9150819050919050565b7f7265637400000000000000000000000000000000000000000000000000000000600082015250565b60006121bf600483611f45565b91506121ca82612189565b600482019050919050565b60006121e0826121b2565b9150819050919050565b7f2300000000000000000000000000000000000000000000000000000000000000600082015250565b6000612220600183611f45565b915061222b826121ea565b600182019050919050565b600061224182612213565b915061224d8284611f50565b915081905092915050565b600082825260208201905092915050565b7f66696c6c00000000000000000000000000000000000000000000000000000000600082015250565b600061229f600483612258565b91506122aa82612269565b602082019050919050565b60006122c082611b88565b6122ca8185612258565b93506122da818560208601611ba4565b6122e381611987565b840191505092915050565b6000604082019050818103600083015261230781612292565b9050818103602083015261231b81846122b5565b905092915050565b600067ffffffffffffffff82111561233e5761233d611998565b5b61234782611987565b9050602081019050919050565b600061236761236284612323565b6119f8565b90508281526020810184848401111561238357612382611982565b5b61238e848285611ba4565b509392505050565b600082601f8301126123ab576123aa61197d565b5b81516123bb848260208601612354565b91505092915050565b6000602082840312156123da576123d96118df565b5b600082015167ffffffffffffffff8111156123f8576123f76118e4565b5b61240484828501612396565b91505092915050565b7f783d223233352220793d22343830222077696474683d2231302220686569676860008201527f743d223130222000000000000000000000000000000000000000000000000000602082015250565b6000612469602783611f45565b91506124748261240d565b602782019050919050565b600061248a8261245c565b91506124968284611fa3565b915081905092915050565b50565b60006124b1600083611f45565b91506124bc826124a1565b600082019050919050565b60006124d2826124a4565b9150819050919050565b600060608201905081810360008301526124f681866122b5565b9050818103602083015261250a81856122b5565b9050818103604083015261251e81846122b5565b9050949350505050565b7f783d223235302220793d22343830222077696474683d2231302220686569676860008201527f743d223130222000000000000000000000000000000000000000000000000000602082015250565b6000612584602783611f45565b915061258f82612528565b602782019050919050565b60006125a582612577565b91506125b18284611fa3565b915081905092915050565b60006125c8828a611fa3565b91506125d48289611fa3565b91506125e08288611fa3565b91506125ec8287611fa3565b91506125f88286611fa3565b91506126048285611fa3565b91506126108284611fa3565b915081905098975050505050505050565b7f3c7376672077696474683d2232393022206865696768743d223530302220766960008201527f6577426f783d2230203020323930203530302220786d6c6e733d22687474703a60208201527f2f2f7777772e77332e6f72672f323030302f737667223e000000000000000000604082015250565b60006126a3605783611f45565b91506126ae82612621565b605782019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b60006126ef600683611f45565b91506126fa826126b9565b600682019050919050565b600061271082612696565b915061271c8285611fa3565b91506127288284611fa3565b9150612733826126e2565b91508190509392505050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b6000612775600983611f45565b91506127808261273f565b600982019050919050565b7f222c20226465736372697074696f6e223a220000000000000000000000000000600082015250565b60006127c1601283611f45565b91506127cc8261278b565b601282019050919050565b7f222c2022696d616765223a202200000000000000000000000000000000000000600082015250565b600061280d600d83611f45565b9150612818826127d7565b600d82019050919050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000612859601a83611f45565b915061286482612823565b601a82019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006128a5600283611f45565b91506128b08261286f565b600282019050919050565b60006128c682612768565b91506128d28286611f50565b91506128dd826127b4565b91506128e98285611f50565b91506128f58284611f50565b915061290082612800565b915061290b8261284c565b915061291682612898565b9150819050949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612959601d83611f45565b915061296482612923565b601d82019050919050565b600061297a8261294c565b91506129868284611f50565b915081905092915050565b600061299c826118e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129cf576129ce611ee5565b5b600182019050919050565b60006129e5826118e9565b91506129f0836118e9565b925082821015612a0357612a02611ee5565b5b828203905092915050565b6000612a19826118e9565b9150612a24836118e9565b925082612a3457612a33611eb6565b5b828206905092915050565b6000612a4a826118e9565b9150612a55836118e9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a8a57612a89611ee5565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f7061746800000000000000000000000000000000000000000000000000000000600082015250565b6000612afa600483611f45565b9150612b0582612ac4565b600482019050919050565b6000612b1b82612aed565b9150819050919050565b7f66696c6c3d22233232323235452220643d224d3020306832393076353030483060008201527f7a22000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b81602283611f45565b9150612b8c82612b25565b602282019050919050565b6000612ba282612b74565b9150819050919050565b7f66696c6c3d22234646462220643d224d323730203168313976343938682d313960008201527f7a22000000000000000000000000000000000000000000000000000000000000602082015250565b6000612c08602283611f45565b9150612c1382612bac565b602282019050919050565b6000612c2982612bfb565b9150819050919050565b6000612c3f8285611fa3565b9150612c4b8284611fa3565b91508190509392505050565b7f7465787400000000000000000000000000000000000000000000000000000000600082015250565b6000612c8d600483611f45565b9150612c9882612c57565b600482019050919050565b6000612cae82612c80565b9150819050919050565b7f636c617373000000000000000000000000000000000000000000000000000000600082015250565b6000612cee600583611f45565b9150612cf982612cb8565b600582019050919050565b6000612d0f82612ce1565b9150819050919050565b7f736d616c6c000000000000000000000000000000000000000000000000000000600082015250565b6000612d4f600583611f45565b9150612d5a82612d19565b600582019050919050565b6000612d7082612d42565b9150819050919050565b60006040820190508181036000830152612d9481856122b5565b90508181036020830152612da881846122b5565b90509392505050565b7f7472616e73666f726d0000000000000000000000000000000000000000000000600082015250565b6000612de7600983611f45565b9150612df282612db1565b600982019050919050565b6000612e0882612dda565b9150819050919050565b7f7374796c65000000000000000000000000000000000000000000000000000000600082015250565b6000612e48600583611f45565b9150612e5382612e12565b600582019050919050565b6000612e6982612e3b565b9150819050919050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ea9600183611f45565b9150612eb482612e73565b600182019050919050565b6000612ecb8286611fa3565b9150612ed682612e9c565b9150612ee28285611fa3565b9150612eed82612e9c565b9150612ef98284611fa3565b9150819050949350505050565b6000612f128284611fa3565b915081905092915050565b7f636c6173733d227469746c6522207472616e73666f726d3d0000000000000000600082015250565b6000612f53601883611f45565b9150612f5e82612f1d565b601882019050919050565b7f227472616e736c61746528000000000000000000000000000000000000000000600082015250565b6000612f9f600b83611f45565b9150612faa82612f69565b600b82019050919050565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612feb600183611f45565b9150612ff682612fb5565b600182019050919050565b7f2922000000000000000000000000000000000000000000000000000000000000600082015250565b6000613037600283611f45565b915061304282613001565b600282019050919050565b600061305882612f46565b915061306382612f92565b915061306f8285611f50565b915061307a82612fde565b91506130868284611f50565b91506130918261302a565b91508190509392505050565b7f747370616e000000000000000000000000000000000000000000000000000000600082015250565b60006130d3600583611f45565b91506130de8261309d565b600582019050919050565b60006130f4826130c6565b9150819050919050565b7f636c6173733d22736d616c6c20616c7068612220783d22302200000000000000600082015250565b6000613134601983611f45565b915061313f826130fe565b601982019050919050565b600061315582613127565b9150819050919050565b7f636c6173733d226c617267652220783d2230222064793d223230220000000000600082015250565b6000613195601b83611f45565b91506131a08261315f565b601b82019050919050565b60006131b682613188565b9150819050919050565b7f534f53202d200000000000000000000000000000000000000000000000000000600082015250565b60006131f6600683611f45565b9150613201826131c0565b600682019050919050565b6000613217826131e9565b91506132238284611f50565b915081905092915050565b600060ff82169050919050565b60006132468261322e565b915060ff82141561325a57613259611ee5565b5b600182019050919050565b7f54686973204e465420726570726573656e7473206120646f6e6174696f6e207460008201527f6f206120534f5320636861696e20000000000000000000000000000000000000602082015250565b60006132c1602e83611f45565b91506132cc82613265565b602e82019050919050565b7f546865206f776e6572206f662074686973204e46542068617320766f74696e6760008201527f2072696768747320666f7220616e20534f5320636861696e2e5c6e0000000000602082015250565b6000613333603b83611f45565b915061333e826132d7565b603b82019050919050565b7f5c5361666520416464726573733a200000000000000000000000000000000000600082015250565b600061337f600f83611f45565b915061338a82613349565b600f82019050919050565b60006133a0826132b4565b91506133ac8285611f50565b91506133b782613326565b91506133c282613372565b91506133ce8284611f50565b91508190509392505050565b7f20416464726573733a2000000000000000000000000000000000000000000000600082015250565b6000613410600a83611f45565b915061341b826133da565b600a82019050919050565b7f5c6e53796d626f6c3a2000000000000000000000000000000000000000000000600082015250565b600061345c600a83611f45565b915061346782613426565b600a82019050919050565b7f5c6e546f6b656e2049443a200000000000000000000000000000000000000000600082015250565b60006134a8600c83611f45565b91506134b382613472565b600c82019050919050565b7f5c6e000000000000000000000000000000000000000000000000000000000000600082015250565b60006134f4600283611f45565b91506134ff826134be565b600282019050919050565b600061351582613403565b91506135218286611f50565b915061352c8261344f565b91506135388285611f50565b91506135438261349b565b915061354f8284611f50565b915061355a826134e7565b9150819050949350505050565b6000613572826118e9565b915061357d836118e9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135b6576135b5611ee5565b5b828202905092915050565b60006135cc826118e9565b915060008214156135e0576135df611ee5565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000613621602083611e4a565b915061362c826135eb565b602082019050919050565b6000602082019050818103600083015261365081613614565b905091905056fe3c7374796c653e3c215b43444154415b746578747b666f6e742d66616d696c793a48656c7665746963613b666f6e742d7765696768743a3130307d2e616c7068617b6f7061636974793a302e357d2e736d616c6c7b666f6e742d73697a653a2e3872656d7d2e6c617267657b666f6e742d73697a653a312e3272656d7d2e7469746c657b66696c6c3a236666667d5d5d3e3c2f7374796c653e3c67207472616e73666f726d3d227472616e736c61746528313620313629223e3c7061746820643d226d35322e372032372e3520332e362d322e31632e3820322e3220322e3420332e3320342e3920332e3320322e34203020332e342d2e3920332e342d322e3320302d2e372d2e342d312e342d312d312e372d2e372d2e342d312e392d2e392d332e362d312e342d312e392d2e362d332e312d312d342e342d322d312e332d2e392d322d322e342d322d342e34732e372d332e3520322d342e3663312e342d312e3120332e322d312e3820352d312e3720332e34203020362e3120312e3820372e3620342e386c2d332e352032632d2e392d312e382d322e322d322e372d342e312d322e372d312e3720302d322e382e392d322e3820322e312030202e372e3320312e332e3820312e362e362e3420312e362e3920332e3220312e336c312e352e35632e352e322e392e3320312e342e35732e392e3420312e332e37632e372e3420312e3620312e31203220312e392e352e392e382032202e382033203020322d2e3720332e352d322e3220342e372d312e3420312e312d332e3320312e372d352e3620312e372d342e3220302d372e312d322d382e332d352e327a6d323820352e32632d36202e312d31312d342e372d31312e312d31302e38762d2e33632d2e312d322e3920312e312d352e3820332e322d372e3820342e332d342e332031312e332d342e332031352e37203020322e31203220332e3320342e3920332e3220372e382e3120362d342e382031312d31302e382031312e312d2e312e312d2e312e312d2e3220307a6d302d342e3163312e382e3120332e362d2e3720342e392d3273322d332e3120322d35632e312d312e392d2e372d332e372d322d352d322e372d322e362d372e312d322e362d392e3820302d312e3320312e332d3220332e312d3220352d2e3120312e392e3720332e372032203520312e3320312e34203320322e3120342e3920327a6d31312e342d312e3120332e362d322e31632e3820322e3220322e3520332e3320342e3920332e3373332e342d2e3920332e342d322e3363302d2e372d2e342d312e342d312d312e372d2e372d2e342d312e392d2e392d332e362d312e342d312e392d2e362d332e312d312d342e342d322d312e332d2e392d322d322e342d322d342e34732e372d332e3520322d342e3663312e342d312e3120332e322d312e3820352d312e3720332e34203020362e3120312e3820372e3620342e386c2d332e352032632d2e392d312e382d322e322d322e372d342e312d322e372d312e3720302d322e382e392d322e3820322e312030202e372e3320312e332e3820312e362e362e3420312e362e3920332e3220312e336c312e352e35632e352e322e392e3320312e342e35732e392e3420312e332e37632e372e3420312e3620312e31203220312e392e352e392e382032202e382033203020322d2e3720332e352d322e3220342e37732d332e3320312e372d352e3620312e37632d342e3220302d372e312d322d382e332d352e327a6d32372e352032632d322e312d322e312d332e322d342e392d332e312d372e3820302d332e3120312d352e3720332e312d372e3873342e372d332e3220372e392d332e3263312e39203020332e372e3520352e3420312e3420312e362e3920322e3920322e3220332e3820332e376c2d312e342e38632d2e372d312e332d312e382d322e342d332e312d332e322d312e342d2e382d332d312e322d342e362d312e322d322e3820302d35202e392d362e3820322e37732d322e3720342e322d322e3620362e37632d2e3120322e352e3920342e3920322e3620362e3720312e3820312e3820342e3120322e3720362e3820322e3720332e33203020362e332d312e3820372e372d342e356c312e342e38632d312e3720332e322d352e3320352e322d392e3220352e322d332e322e322d352e382d2e392d372e392d337a4d3135332e3720313168312e367632312e33682d312e365632322e31682d31322e347631302e32682d312e3656313168312e3676392e366831322e345631317a6d32302e352032312e332d322e312d352e34682d31302e376c2d322e3120352e34682d312e376c382e332d32312e3368312e376c382e322032312e33682d312e367a6d2d31322e312d362e3968392e354c3136362e382031336c2d342e372031322e347a4d3137382e3320313168312e367632312e33682d312e365631317a6d32302e31203068312e367632312e33682d312e344c3138362031347631382e33682d312e3656313168312e346c31322e362031382e335631317a22207374796c653d2266696c6c3a23666666222f3e3c6c696e6561724772616469656e742069643d2253564749445f315f22206772616469656e74556e6974733d227573657253706163654f6e557365222078313d2235372e393133222079313d223137392e323732222078323d2239382e363535222079323d223232302e30323422206772616469656e745472616e73666f726d3d227472616e736c6174652830202d35352e373629207363616c65282e3330393729223e3c73746f70206f66667365743d223022207374796c653d2273746f702d636f6c6f723a23333635666338222f3e3c73746f70206f66667365743d222e303522207374796c653d2273746f702d636f6c6f723a23333336386361222f3e3c73746f70206f66667365743d222e333722207374796c653d2273746f702d636f6c6f723a23323239656434222f3e3c73746f70206f66667365743d222e363522207374796c653d2273746f702d636f6c6f723a23313563366463222f3e3c73746f70206f66667365743d222e383722207374796c653d2273746f702d636f6c6f723a23306464656530222f3e3c73746f70206f66667365743d223122207374796c653d2273746f702d636f6c6f723a23306165376532222f3e3c2f6c696e6561724772616469656e743e3c7061746820643d226d313420332e3720362e3220362e32632e392d2e3920322e342d2e3920332e332030732e3920322e34203020332e3363322e352d322e3420352e392d332e3620392e342d332e324333322e3120342032362e342d2e332032302e342e35203138202e382031352e3720312e3920313420332e377a22207374796c653d2266696c6c3a75726c282353564749445f315f29222f3e3c6c696e6561724772616469656e742069643d2253564749445f325f22206772616469656e74556e6974733d227573657253706163654f6e557365222078313d2237392e373336222079313d223332302e3733222078323d2233382e393835222079323d223237392e39373922206772616469656e745472616e73666f726d3d227472616e736c6174652830202d35352e373629207363616c65282e3330393729223e3c73746f70206f66667365743d223022207374796c653d2273746f702d636f6c6f723a23333635666338222f3e3c73746f70206f66667365743d222e303522207374796c653d2273746f702d636f6c6f723a23333336386361222f3e3c73746f70206f66667365743d222e333722207374796c653d2273746f702d636f6c6f723a23323239656434222f3e3c73746f70206f66667365743d222e363522207374796c653d2273746f702d636f6c6f723a23313563366463222f3e3c73746f70206f66667365743d222e383722207374796c653d2273746f702d636f6c6f723a23306464656530222f3e3c73746f70206f66667365743d223122207374796c653d2273746f702d636f6c6f723a23306165376532222f3e3c2f6c696e6561724772616469656e743e3c7061746820643d224d31392e312033332e34632d2e392d2e392d2e392d322e3520302d332e342d322e3420322e342d352e3920332e372d392e3420332e332e3820362e3120362e342031302e332031322e3520392e3520322e342d2e3320342e362d312e3420362e332d332e326c2d362e322d362e32632d2e392e392d322e332e392d332e3220307a22207374796c653d2266696c6c3a75726c282353564749445f325f29222f3e3c6c696e6561724772616469656e742069643d2253564749445f335f22206772616469656e74556e6974733d227573657253706163654f6e557365222078313d2232372e383431222079313d223230392e313831222078323d223130392e333931222079323d223239302e37333122206772616469656e745472616e73666f726d3d227472616e736c6174652830202d35352e373629207363616c65282e3330393729223e3c73746f70206f66667365743d223022207374796c653d2273746f702d636f6c6f723a23646530313661222f3e3c73746f70206f66667365743d222e313822207374796c653d2273746f702d636f6c6f723a23643830313661222f3e3c73746f70206f66667365743d222e343122207374796c653d2273746f702d636f6c6f723a23633830323661222f3e3c73746f70206f66667365743d222e363622207374796c653d2273746f702d636f6c6f723a23616430343639222f3e3c73746f70206f66667365743d222e393422207374796c653d2273746f702d636f6c6f723a23383730363638222f3e3c73746f70206f66667365743d223122207374796c653d2273746f702d636f6c6f723a23376630373638222f3e3c2f6c696e6561724772616469656e743e3c7061746820643d224d33392e322031332e32632d312e372d312e372d332e392d322e382d362e332d332e322d332e342d2e352d362e392e372d392e3420332e324c31322e382032332e39632d2e392e392d322e342e382d332e332d2e312d2e382d2e392d2e382d322e3320302d332e324c32302e3220392e3920313420332e3720332e332031342e34432d312031382e372d312032352e3820332e332033302e3163312e3720312e37203420322e3820362e3320332e3220332e342e3520362e392d2e3720392e342d332e326c31302e372d31302e372e322d2e3263312d2e3820322e352d2e3620332e332e342e372e392e3720322e322d2e3220332e314c32322e332033332e346c362e3220362e322031302e372d31302e3763342e342d342e3320342e342d31312e3320302d31352e377a22207374796c653d2266696c6c3a75726c282353564749445f335f29222f3e3c2f673e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212200c7c548e23096b0d0c728d1b073f5abb4ae77d7e72811664a58c09e50abd895564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063011b66511461005157806341b3394c14610081578063b29e697c146100b1578063be4eeda7146100e1575b600080fd5b61006b60048036038101906100669190611ac3565b610111565b6040516100789190611c10565b60405180910390f35b61009b60048036038101906100969190611df6565b6106d8565b6040516100a89190611e94565b60405180910390f35b6100cb60048036038101906100c69190611ac3565b610795565b6040516100d89190611e94565b60405180910390f35b6100fb60048036038101906100f69190611ac3565b6107b9565b6040516101089190611e94565b60405180910390f35b606060006101208760006107d5565b9050600061012f8860886107d5565b9050600061014f670de0b6b3a76400008961014a9190611f14565b61080c565b60405160200161015f9190611f81565b604051602081830303815290604052905060006040518060c00160405280609981526020016136586099913961019361096d565b60405180610ee00160405280610ea981526020016136f1610ea991396040516020016101c193929190611fd4565b604051602081830303815290604052905060006102406101e08d61080c565b6040516020016101f09190611f81565b60405160208183030381529060405260405160200161020e90612051565b60405160208183030381529060405260405160200161022c906120b2565b604051602081830303815290604052610b44565b61028d61024c8d610e1d565b60405160200161025b90612113565b60405160208183030381529060405260405160200161027990612174565b604051602081830303815290604052610b44565b6102ef601460646040518060400160405280600481526020017f46756e64000000000000000000000000000000000000000000000000000000008152508d6040516020016102db9190611f81565b604051602081830303815290604052610e4e565b610351601460966040518060400160405280600581526020017f466f6375730000000000000000000000000000000000000000000000000000008152508d60405160200161033d9190611f81565b604051602081830303815290604052610e4e565b610394601460c86040518060400160405280600781526020017f537570706f7274000000000000000000000000000000000000000000000000008152508a610e4e565b73__$82beeda6ea394b7a833df2688a12460f68$__639887edcd6040516020016103bd906121d5565b60405160208183030381529060405273__$82beeda6ea394b7a833df2688a12460f68$__6315824f828e6040516020016103f79190612236565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161042291906122ee565b600060405180830381865af415801561043f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061046891906123c4565b604051602001610478919061247f565b604051602081830303815290604052604051602001610496906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016104c3939291906124dc565b600060405180830381865af41580156104e0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061050991906123c4565b73__$82beeda6ea394b7a833df2688a12460f68$__639887edcd604051602001610532906121d5565b60405160208183030381529060405273__$82beeda6ea394b7a833df2688a12460f68$__6315824f828e60405160200161056c9190612236565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161059791906122ee565b600060405180830381865af41580156105b4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105dd91906123c4565b6040516020016105ed919061259a565b60405160208183030381529060405260405160200161060b906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610638939291906124dc565b600060405180830381865af4158015610655573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061067e91906123c4565b60405160200161069497969594939291906125bc565b604051602081830303815290604052905081816040516020016106b8929190612705565b604051602081830303815290604052955050505050509695505050505050565b606060006106e5836110be565b9050600061070b6106f985604001516110f3565b6107068660e0015161138b565b6113be565b9050600061073e61071f866000015161080c565b61072c87604001516110f3565b610739886020015161138b565b6113ea565b905061076c838383604051602001610758939291906128bb565b604051602081830303815290604052611419565b60405160200161077c919061296f565b6040516020818303038152906040529350505050919050565b60606107ad6107a8888888888888610111565b611419565b90509695505050505050565b60606107c9878787878787610111565b90509695505050505050565b60606108046003838573ffffffffffffffffffffffffffffffffffffffff16901c61157d90919063ffffffff16565b905092915050565b60606000821415610854576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610968565b600082905060005b6000821461088657808061086f90612991565b915050600a8261087f9190611f14565b915061085c565b60008167ffffffffffffffff8111156108a2576108a1611998565b5b6040519080825280601f01601f1916602001820160405280156108d45781602001600182028036833780820191505090505b5090505b60008514610961576001826108ed91906129da565b9150600a856108fc9190612a0e565b60306109089190612a3f565b60f81b81838151811061091e5761091d612a95565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561095a9190611f14565b94506108d8565b8093505050505b919050565b606073__$82beeda6ea394b7a833df2688a12460f68$__639887edcd60405160200161099890612b10565b6040516020818303038152906040526040516020016109b690612b97565b6040516020818303038152906040526040516020016109d4906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610a01939291906124dc565b600060405180830381865af4158015610a1e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a4791906123c4565b73__$82beeda6ea394b7a833df2688a12460f68$__639887edcd604051602001610a7090612b10565b604051602081830303815290604052604051602001610a8e90612c1e565b604051602081830303815290604052604051602001610aac906124c7565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401610ad9939291906124dc565b600060405180830381865af4158015610af6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1f91906123c4565b604051602001610b30929190612c33565b604051602081830303815290604052905090565b606073__$82beeda6ea394b7a833df2688a12460f68$__639887edcd604051602001610b6f90612ca3565b60405160208183030381529060405273__$82beeda6ea394b7a833df2688a12460f68$__6315824f82604051602001610ba790612d04565b604051602081830303815290604052604051602001610bc590612d65565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610bf1929190612d7a565b600060405180830381865af4158015610c0e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c3791906123c4565b73__$82beeda6ea394b7a833df2688a12460f68$__6315824f82604051602001610c6090612dfd565b604051602081830303815290604052896040518363ffffffff1660e01b8152600401610c8d929190612d7a565b600060405180830381865af4158015610caa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cd391906123c4565b73__$82beeda6ea394b7a833df2688a12460f68$__6315824f82604051602001610cfc90612e5e565b604051602081830303815290604052896040518363ffffffff1660e01b8152600401610d29929190612d7a565b600060405180830381865af4158015610d46573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d6f91906123c4565b604051602001610d8193929190612ebf565b604051602081830303815290604052876040518463ffffffff1660e01b8152600401610daf939291906124dc565b600060405180830381865af4158015610dcc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610df591906123c4565b604051602001610e059190612f06565b60405160208183030381529060405290509392505050565b6060610e288261138b565b604051602001610e389190611f81565b6040516020818303038152906040529050919050565b606073__$82beeda6ea394b7a833df2688a12460f68$__639887edcd604051602001610e7990612ca3565b604051602081830303815290604052610e918861080c565b610e9a8861080c565b604051602001610eab92919061304d565b60405160208183030381529060405273__$82beeda6ea394b7a833df2688a12460f68$__639887edcd604051602001610ee3906130e9565b604051602081830303815290604052604051602001610f019061314a565b6040516020818303038152906040528a6040518463ffffffff1660e01b8152600401610f2f939291906124dc565b600060405180830381865af4158015610f4c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f7591906123c4565b73__$82beeda6ea394b7a833df2688a12460f68$",
  "libraries": {
    "SVG": "0x234A11FE18aed6a86F4B96610c8CB686c4CF2855"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}